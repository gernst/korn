/* The following code was generated by JFlex 1.7.0 */

package korn;

import beaver.Symbol;
import java.util.Set;
import scala.math.BigInt;
import korn.Parser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>korn/src/korn/Scanner.flex</tt>
 */
public class Scanner extends beaver.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\20\1\21\1\1\22\0\1\3\1\35\1\104"+
    "\1\22\1\0\1\44\1\47\1\102\1\24\1\25\1\23\1\32\1\54"+
    "\1\10\1\33\1\17\1\100\11\4\1\53\1\55\1\45\1\46\1\34"+
    "\1\52\1\0\1\6\1\61\2\6\1\7\1\12\5\5\1\14\10\5"+
    "\1\16\2\5\1\101\2\5\1\26\1\103\1\27\1\50\1\60\1\0"+
    "\1\62\1\64\1\65\1\57\1\42\1\11\1\71\1\66\1\40\1\5"+
    "\1\76\1\13\1\72\1\70\1\43\1\74\1\5\1\67\1\37\1\63"+
    "\1\15\1\56\1\75\1\77\1\73\1\41\1\30\1\51\1\31\1\36"+
    "\6\0\1\20\u1fa2\0\1\20\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\4\4\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\3\4\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\11\4\1\3\2\1\1\0\1\3\1\35\1\36\1\37"+
    "\1\40\3\4\2\0\1\4\2\0\2\2\1\41\1\42"+
    "\1\43\1\44\4\4\1\45\4\4\1\46\1\47\1\50"+
    "\1\51\1\52\1\4\1\53\12\4\4\0\1\54\1\35"+
    "\1\0\1\35\1\4\1\55\3\4\2\0\6\4\1\56"+
    "\23\4\1\57\1\60\1\4\1\61\2\4\1\0\6\4"+
    "\1\62\1\63\2\4\1\64\12\4\1\65\1\66\1\4"+
    "\1\67\1\4\1\57\1\70\1\0\1\4\1\71\4\4"+
    "\1\72\10\4\1\73\1\4\1\74\1\2\2\4\1\75"+
    "\3\0\1\4\1\76\1\77\1\100\1\101\1\4\1\102"+
    "\6\4\1\103\3\0\5\4\1\104\1\4\3\0\1\105"+
    "\3\4\1\106\1\107\2\0\2\4\2\0\2\4\1\0"+
    "\1\110\2\4\1\0\2\4\1\111\1\4\4\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\u0381\0\u03c6\0\u040b\0\u0450\0\105"+
    "\0\u0495\0\u04da\0\u051f\0\u033c\0\u0564\0\u05a9\0\u05ee\0\u033c"+
    "\0\u0633\0\105\0\105\0\105\0\105\0\u0678\0\u06bd\0\u0702"+
    "\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\105\0\105\0\105\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u092a\0\u096f\0\u0b52\0\u02f7\0\u0b97\0\u0bdc"+
    "\0\105\0\105\0\u033c\0\105\0\105\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0114\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u033c\0\105"+
    "\0\105\0\105\0\105\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\105\0\u1299\0\u12de\0\105\0\u1323"+
    "\0\u0114\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u0114\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39"+
    "\0\u1b7e\0\105\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u0114\0\u0114\0\u1eba"+
    "\0\u1eff\0\u0114\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u0114\0\u0114\0\u21f6\0\u0114"+
    "\0\u223b\0\u2280\0\u0114\0\u22c5\0\u230a\0\u0114\0\u234f\0\u2394"+
    "\0\u23d9\0\u241e\0\u0114\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u25bc\0\u2601\0\u2646\0\u0114\0\u268b\0\u0114\0\u0114\0\u26d0"+
    "\0\u2715\0\u0114\0\u275a\0\u279f\0\u27e4\0\u2829\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u286e\0\u0114\0\u28b3\0\u28f8\0\u293d\0\u2982"+
    "\0\u29c7\0\u2a0c\0\u0114\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u0114\0\u2c79\0\u2cbe\0\u2d03\0\u2d48"+
    "\0\u0114\0\u2d8d\0\u2dd2\0\u2e17\0\u0114\0\105\0\u2e5c\0\u2ea1"+
    "\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\105"+
    "\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\105\0\u3222\0\u3267"+
    "\0\u32ac\0\u32f1\0\u3336\0\u3336";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\3\5\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\5\1\13\1\2\1\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\5\1\33\1\5"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\5\1\51\1\52"+
    "\1\53\1\5\1\54\1\5\1\55\3\5\1\56\2\5"+
    "\1\57\1\5\1\60\1\2\1\61\106\0\3\3\15\0"+
    "\1\3\67\0\1\4\2\0\1\62\3\0\4\63\14\0"+
    "\1\64\6\0\1\62\35\0\1\4\10\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\24\5\13\0\1\65\23\0"+
    "\1\66\11\0\1\67\42\0\4\5\1\0\2\5\1\70"+
    "\3\5\20\0\4\5\1\71\12\0\24\5\7\0\4\5"+
    "\1\0\6\5\20\0\4\5\1\72\12\0\24\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\24\5\1\73"+
    "\1\0\1\74\4\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\12\5\1\75\11\5\22\0\1\76\3\0\1\77"+
    "\22\0\1\67\36\0\1\76\1\100\1\101\15\76\2\0"+
    "\63\76\46\0\1\67\70\0\1\102\13\0\1\67\42\0"+
    "\1\64\73\0\1\64\40\0\1\103\11\0\1\104\104\0"+
    "\1\105\42\0\4\5\1\0\6\5\20\0\1\5\1\106"+
    "\3\5\12\0\5\5\1\107\2\5\1\110\6\5\1\111"+
    "\4\5\7\0\4\5\1\0\1\112\5\5\20\0\5\5"+
    "\12\0\12\5\1\113\11\5\7\0\4\5\1\0\2\5"+
    "\1\114\3\5\20\0\5\5\12\0\12\5\1\115\6\5"+
    "\1\116\2\5\50\0\1\117\1\120\104\0\1\121\104\0"+
    "\1\67\1\122\103\0\1\67\2\0\1\123\37\0\4\5"+
    "\1\0\6\5\20\0\4\5\1\124\12\0\24\5\7\0"+
    "\4\5\1\0\6\5\20\0\4\5\1\125\12\0\24\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\2\5"+
    "\1\126\1\127\20\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\15\5\1\130\6\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\11\5\1\131\12\5\7\0"+
    "\4\5\1\0\6\5\20\0\4\5\1\132\12\0\4\5"+
    "\1\133\3\5\1\134\13\5\7\0\4\5\1\0\6\5"+
    "\20\0\3\5\1\135\1\5\12\0\24\5\7\0\4\5"+
    "\1\0\6\5\20\0\4\5\1\136\12\0\24\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\10\5\1\137"+
    "\13\5\7\0\1\4\2\0\1\62\3\0\4\63\14\0"+
    "\1\64\6\0\1\62\34\0\1\140\1\4\1\140\3\0"+
    "\102\141\1\0\1\142\1\141\103\74\1\143\1\144\4\0"+
    "\1\145\3\0\1\146\21\0\1\146\45\0\1\145\17\0"+
    "\4\63\72\0\1\64\2\0\1\62\1\0\4\147\25\0"+
    "\1\62\35\0\1\64\10\0\4\5\1\0\6\5\20\0"+
    "\4\5\1\150\12\0\24\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\11\5\1\151\12\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\12\5\1\152\11\5"+
    "\7\0\4\5\1\0\6\5\20\0\1\153\1\154\3\5"+
    "\12\0\24\5\3\0\23\155\1\156\61\155\2\0\1\101"+
    "\106\0\4\5\1\0\6\5\20\0\2\5\1\157\2\5"+
    "\12\0\13\5\1\160\10\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\4\5\1\161\4\5\1\162\12\5"+
    "\7\0\4\5\1\0\6\5\20\0\4\5\1\163\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\1\5\1\164"+
    "\3\5\12\0\24\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\5\5\1\165\16\5\7\0\4\5\1\0"+
    "\6\5\20\0\1\166\4\5\12\0\24\5\7\0\4\5"+
    "\1\0\4\5\1\167\1\5\20\0\5\5\12\0\24\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\5\5"+
    "\1\170\16\5\7\0\4\5\1\0\2\5\1\171\3\5"+
    "\20\0\1\5\1\172\3\5\12\0\24\5\7\0\4\5"+
    "\1\0\4\5\1\173\1\5\20\0\5\5\12\0\24\5"+
    "\7\0\4\5\1\0\6\5\20\0\1\5\1\174\1\5"+
    "\1\175\1\5\12\0\4\5\1\176\4\5\1\177\12\5"+
    "\7\0\4\5\1\0\6\5\20\0\4\5\1\200\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\16\5\1\201\5\5\7\0\4\5\1\0\6\5\20\0"+
    "\3\5\1\202\1\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\12\5\1\203\11\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\204\4\5\12\0\24\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\4\5"+
    "\1\205\17\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\5\5\1\206\16\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\5\5\1\207\16\5\7\0\4\5"+
    "\1\0\6\5\20\0\1\5\1\210\3\5\12\0\24\5"+
    "\7\0\1\211\1\0\2\211\1\0\2\211\27\0\1\211"+
    "\14\0\1\211\1\0\2\211\1\0\2\211\12\0\1\211"+
    "\4\0\102\141\1\212\1\142\2\141\2\0\15\141\2\0"+
    "\63\141\1\74\2\0\15\74\2\0\63\74\4\0\1\145"+
    "\4\0\4\147\63\0\1\145\10\0\1\145\73\0\1\145"+
    "\10\0\4\5\1\0\6\5\20\0\5\5\12\0\4\5"+
    "\1\213\17\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\13\5\1\214\10\5\7\0\4\5\1\0\6\5"+
    "\20\0\1\5\1\215\3\5\12\0\24\5\7\0\4\5"+
    "\1\0\6\5\20\0\4\5\1\216\12\0\24\5\3\0"+
    "\23\155\1\217\61\155\17\0\1\101\3\0\1\156\65\0"+
    "\4\5\1\0\6\5\20\0\3\5\1\220\1\5\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\12\5\1\221\11\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\5\5\1\222\16\5\7\0\4\5\1\0"+
    "\4\5\1\223\1\5\20\0\5\5\12\0\24\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\11\5\1\224"+
    "\12\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\5\5\1\225\16\5\7\0\4\5\1\0\6\5\20\0"+
    "\3\5\1\226\1\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\14\5\1\227\7\5\7\0"+
    "\4\5\1\0\6\5\20\0\3\5\1\230\1\5\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\4\5\1\231\17\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\1\5\1\232\22\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\6\5\1\233\15\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\12\5\1\234"+
    "\11\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\21\5\1\235\2\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\5\5\1\236\16\5\7\0\4\5\1\0"+
    "\6\5\20\0\3\5\1\237\1\5\12\0\24\5\7\0"+
    "\4\5\1\0\6\5\20\0\4\5\1\240\12\0\24\5"+
    "\7\0\4\5\1\0\6\5\20\0\3\5\1\241\1\5"+
    "\12\0\24\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\4\5\1\242\17\5\7\0\4\5\1\0\6\5"+
    "\20\0\1\243\4\5\12\0\5\5\1\244\16\5\7\0"+
    "\4\5\1\0\6\5\20\0\3\5\1\245\1\5\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\11\5\1\246\12\5\7\0\4\5\1\0\4\5\1\247"+
    "\1\5\20\0\5\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\4\5\1\250\12\0\24\5\7\0\4\5"+
    "\1\0\2\5\1\251\3\5\20\0\5\5\12\0\24\5"+
    "\7\0\1\211\1\0\2\211\1\0\2\211\4\252\23\0"+
    "\1\211\14\0\1\211\1\0\2\211\1\0\2\211\12\0"+
    "\1\211\10\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\5\5\1\253\16\5\4\0\3\254\4\5\1\0\6\5"+
    "\2\0\1\254\15\0\5\5\12\0\24\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\13\5\1\255\10\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\12\5"+
    "\1\256\11\5\3\0\17\155\1\101\3\155\1\217\61\155"+
    "\4\0\4\5\1\0\6\5\20\0\4\5\1\257\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\3\5\1\260"+
    "\1\5\12\0\24\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\5\1\261\3\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\7\5\1\262\14\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\5\5\1\263"+
    "\16\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\7\5\1\264\14\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\11\5\1\265\12\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\5\5\1\266\16\5\7\0"+
    "\4\5\1\0\2\5\1\267\3\5\20\0\5\5\12\0"+
    "\24\5\7\0\4\5\1\0\2\5\1\270\3\5\20\0"+
    "\5\5\12\0\24\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\5\5\1\271\16\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\5\5\1\272\16\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\273\4\5\12\0\24\5"+
    "\7\0\4\5\1\0\2\5\1\274\3\5\20\0\5\5"+
    "\12\0\24\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\1\5\1\275\22\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\20\5\1\276\3\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\5\5\1\277\16\5"+
    "\7\0\4\5\1\0\6\5\20\0\1\5\1\300\3\5"+
    "\12\0\24\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\11\5\1\301\12\5\7\0\4\5\1\0\6\5"+
    "\20\0\3\5\1\302\1\5\12\0\24\5\16\0\4\252"+
    "\67\0\3\254\7\0\1\303\1\0\1\304\3\0\1\254"+
    "\35\0\1\305\31\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\12\5\1\306\11\5\7\0\4\5\1\0\1\307"+
    "\5\5\20\0\5\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\1\5\1\310\22\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\7\5\1\277"+
    "\14\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\5\5\1\311\16\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\10\5\1\312\13\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\12\5\1\277\11\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\5\1\313\3\5\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\3\5\1\314"+
    "\1\5\12\0\24\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\5\1\315\3\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\3\5\1\316\1\5\12\0\24\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\11\5\1\317"+
    "\12\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\5\5\1\320\16\5\7\0\4\5\1\0\6\5\20\0"+
    "\3\5\1\321\1\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\12\5\1\322\11\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\12\5\1\323"+
    "\11\5\46\0\1\324\131\0\1\325\57\0\1\326\45\0"+
    "\4\5\1\0\6\5\20\0\3\5\1\327\1\5\12\0"+
    "\24\5\7\0\4\5\1\0\2\5\1\330\3\5\20\0"+
    "\5\5\12\0\24\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\12\5\1\330\11\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\12\5\1\331\11\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\5\1\332\3\5\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\11\5\1\333\12\5\7\0\4\5\1\0\1\334\5\5"+
    "\20\0\5\5\12\0\24\5\7\0\4\5\1\0\4\5"+
    "\1\335\1\5\20\0\5\5\12\0\24\5\73\0\1\336"+
    "\53\0\1\337\62\0\1\340\73\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\1\5\1\341\22\5\7\0\4\5"+
    "\1\0\6\5\20\0\3\5\1\277\1\5\12\0\24\5"+
    "\7\0\4\5\1\0\6\5\20\0\1\342\4\5\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\6\5\1\343\15\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\5\1\344\3\5\12\0\24\5\7\0\4\5\1\0"+
    "\6\5\20\0\3\5\1\345\1\5\12\0\24\5\74\0"+
    "\1\346\53\0\1\347\130\0\1\350\24\0\4\5\1\0"+
    "\6\5\20\0\1\5\1\351\3\5\12\0\24\5\7\0"+
    "\4\5\1\0\4\5\1\352\1\5\20\0\5\5\12\0"+
    "\24\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\7\5\1\243\14\5\74\0\1\353\26\0\1\354\75\0"+
    "\4\5\1\0\6\5\20\0\4\5\1\355\12\0\24\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\5\5"+
    "\1\356\16\5\73\0\1\357\56\0\1\360\46\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\12\5\1\361\11\5"+
    "\7\0\4\5\1\0\6\5\20\0\3\5\1\362\1\5"+
    "\12\0\24\5\45\0\1\363\46\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\2\5\1\364\21\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\2\5\1\365\21\5"+
    "\62\0\1\366\31\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\2\5\1\277\21\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\2\5\1\367\21\5\4\0\3\370"+
    "\4\5\1\0\6\5\2\0\1\370\15\0\5\5\12\0"+
    "\24\5\4\0\3\370\15\0\1\370\2\0\1\371\104\0"+
    "\1\372\60\0\1\372\2\0\15\372\2\0\3\372\1\373"+
    "\60\372\2\0\15\372\2\0\3\372\1\374\57\372";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13179];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\6\11\4\1\1\11\11\1\4\11"+
    "\14\1\1\0\2\1\3\11\3\1\2\0\1\1\2\0"+
    "\1\1\2\11\1\1\2\11\12\1\4\11\14\1\4\0"+
    "\1\11\1\1\1\0\1\11\5\1\2\0\33\1\1\11"+
    "\4\1\1\0\34\1\1\0\26\1\3\0\16\1\3\0"+
    "\7\1\3\0\5\1\1\11\2\0\2\1\2\0\2\1"+
    "\1\0\1\11\2\1\1\0\2\1\1\11\1\1\4\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Set<String> types;

  	public final String yytext(int from) {
    	return new String( zzBuffer, zzStartRead + from, zzMarkedPos-zzStartRead-from );
  	}
	
	long makeInt(String text) {
		return Long.parseLong(text.replaceAll("([uUlL])", ""));
	}
	
	double makeDouble(String text) {
		return Double.parseDouble(text.replaceAll("([fFlL])", ""));
	}

    Symbol resolve(String name) {
    	if(types.contains(name)) {
    		return newToken(Terminals.TYPE, name);
    	} else {
    		return newToken(Terminals.ID,   name);
    	}
    }

	Symbol newToken(short id)
	{
		return newToken(id, yytext());
	}

	Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return newToken(Terminals.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Scanner.Exception("unexpected character '" + yytext() + "'");
            } 
            // fall through
          case 74: break;
          case 2: 
            { 
            } 
            // fall through
          case 75: break;
          case 3: 
            { return newToken(Terminals.CONST, Long.parseLong(yytext()));
            } 
            // fall through
          case 76: break;
          case 4: 
            { return resolve(yytext());
            } 
            // fall through
          case 77: break;
          case 5: 
            { return newToken(Terminals.MINUS);
            } 
            // fall through
          case 78: break;
          case 6: 
            { return newToken(Terminals.DIV);
            } 
            // fall through
          case 79: break;
          case 7: 
            { return newToken(Terminals.STAR);
            } 
            // fall through
          case 80: break;
          case 8: 
            { return newToken(Terminals.LPAREN);
            } 
            // fall through
          case 81: break;
          case 9: 
            { return newToken(Terminals.RPAREN);
            } 
            // fall through
          case 82: break;
          case 10: 
            { return newToken(Terminals.LBRACK);
            } 
            // fall through
          case 83: break;
          case 11: 
            { return newToken(Terminals.RBRACK);
            } 
            // fall through
          case 84: break;
          case 12: 
            { return newToken(Terminals.LBRACE);
            } 
            // fall through
          case 85: break;
          case 13: 
            { return newToken(Terminals.RBRACE);
            } 
            // fall through
          case 86: break;
          case 14: 
            { return newToken(Terminals.PLUS);
            } 
            // fall through
          case 87: break;
          case 15: 
            { return newToken(Terminals.DOT);
            } 
            // fall through
          case 88: break;
          case 16: 
            { return newToken(Terminals.GT);
            } 
            // fall through
          case 89: break;
          case 17: 
            { return newToken(Terminals.BANG);
            } 
            // fall through
          case 90: break;
          case 18: 
            { return newToken(Terminals.TILDE);
            } 
            // fall through
          case 91: break;
          case 19: 
            { return newToken(Terminals.MOD);
            } 
            // fall through
          case 92: break;
          case 20: 
            { return newToken(Terminals.LT);
            } 
            // fall through
          case 93: break;
          case 21: 
            { return newToken(Terminals.ASG);
            } 
            // fall through
          case 94: break;
          case 22: 
            { return newToken(Terminals.AMP);
            } 
            // fall through
          case 95: break;
          case 23: 
            { return newToken(Terminals.CARET);
            } 
            // fall through
          case 96: break;
          case 24: 
            { return newToken(Terminals.PIPE);
            } 
            // fall through
          case 97: break;
          case 25: 
            { return newToken(Terminals.QUESTION);
            } 
            // fall through
          case 98: break;
          case 26: 
            { return newToken(Terminals.COLON);
            } 
            // fall through
          case 99: break;
          case 27: 
            { return newToken(Terminals.COMMA);
            } 
            // fall through
          case 100: break;
          case 28: 
            { return newToken(Terminals.SEMICOLON);
            } 
            // fall through
          case 101: break;
          case 29: 
            { return newToken(Terminals.CONST, Double.parseDouble(yytext()));
            } 
            // fall through
          case 102: break;
          case 30: 
            { return newToken(Terminals.DECR);
            } 
            // fall through
          case 103: break;
          case 31: 
            { return newToken(Terminals.ARROW);
            } 
            // fall through
          case 104: break;
          case 32: 
            { return newToken(Terminals.ASG_OP, yytext());
            } 
            // fall through
          case 105: break;
          case 33: 
            { return newToken(Terminals.INCR);
            } 
            // fall through
          case 106: break;
          case 34: 
            { return newToken(Terminals.SHR);
            } 
            // fall through
          case 107: break;
          case 35: 
            { return newToken(Terminals.GE);
            } 
            // fall through
          case 108: break;
          case 36: 
            { return newToken(Terminals.NEQ);
            } 
            // fall through
          case 109: break;
          case 37: 
            { return newToken(Terminals.IF);
            } 
            // fall through
          case 110: break;
          case 38: 
            { return newToken(Terminals.SHL);
            } 
            // fall through
          case 111: break;
          case 39: 
            { return newToken(Terminals.LE);
            } 
            // fall through
          case 112: break;
          case 40: 
            { return newToken(Terminals.EQ);
            } 
            // fall through
          case 113: break;
          case 41: 
            { return newToken(Terminals.AND);
            } 
            // fall through
          case 114: break;
          case 42: 
            { return newToken(Terminals.OR);
            } 
            // fall through
          case 115: break;
          case 43: 
            { return newToken(Terminals.DO);
            } 
            // fall through
          case 116: break;
          case 44: 
            { return newToken(Terminals.CONST, Parsing.str(yytext()));
            } 
            // fall through
          case 117: break;
          case 45: 
            { return newToken(Terminals.FOR);
            } 
            // fall through
          case 118: break;
          case 46: 
            { return newToken(Terminals.INT);
            } 
            // fall through
          case 119: break;
          case 47: 
            { return newToken(Terminals.CONST, Long.parseLong(yytext(2), 16));
            } 
            // fall through
          case 120: break;
          case 48: 
            { return newToken(Terminals.CONST, Parsing.ch(yytext()));
            } 
            // fall through
          case 121: break;
          case 49: 
            { return newToken(Terminals.LONG);
            } 
            // fall through
          case 122: break;
          case 50: 
            { return newToken(Terminals.ELSE);
            } 
            // fall through
          case 123: break;
          case 51: 
            { return newToken(Terminals.ENUM);
            } 
            // fall through
          case 124: break;
          case 52: 
            { return newToken(Terminals.VOID);
            } 
            // fall through
          case 125: break;
          case 53: 
            { return newToken(Terminals.CASE);
            } 
            // fall through
          case 126: break;
          case 54: 
            { return newToken(Terminals.CHAR);
            } 
            // fall through
          case 127: break;
          case 55: 
            { return newToken(Terminals.GOTO);
            } 
            // fall through
          case 128: break;
          case 56: 
            { return newToken(Terminals.FLOAT);
            } 
            // fall through
          case 129: break;
          case 57: 
            { return newToken(Terminals.UNION);
            } 
            // fall through
          case 130: break;
          case 58: 
            { return newToken(Terminals.SHORT);
            } 
            // fall through
          case 131: break;
          case 59: 
            { return newToken(Terminals.BOOL);
            } 
            // fall through
          case 132: break;
          case 60: 
            { return newToken(Terminals.BREAK);
            } 
            // fall through
          case 133: break;
          case 61: 
            { return newToken(Terminals.WHILE);
            } 
            // fall through
          case 134: break;
          case 62: 
            { return newToken(Terminals.SIZEOF);
            } 
            // fall through
          case 135: break;
          case 63: 
            { return newToken(Terminals.SIGNED);
            } 
            // fall through
          case 136: break;
          case 64: 
            { return newToken(Terminals.STRUCT);
            } 
            // fall through
          case 137: break;
          case 65: 
            { return newToken(Terminals.SWITCH);
            } 
            // fall through
          case 138: break;
          case 66: 
            { return newToken(Terminals.DOUBLE);
            } 
            // fall through
          case 139: break;
          case 67: 
            { return newToken(Terminals.RETURN);
            } 
            // fall through
          case 140: break;
          case 68: 
            { return newToken(Terminals.TYPEDEF);
            } 
            // fall through
          case 141: break;
          case 69: 
            { return newToken(Terminals.UNSIGNED);
            } 
            // fall through
          case 142: break;
          case 70: 
            { return newToken(Terminals.CONTINUE);
            } 
            // fall through
          case 143: break;
          case 71: 
            { return newToken(Terminals.LONG_LONG);
            } 
            // fall through
          case 144: break;
          case 72: 
            { return newToken(Terminals.LONG_DOUBLE);
            } 
            // fall through
          case 145: break;
          case 73: 
            { return newToken(Terminals.LONG_UNSIGNED);
            } 
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
