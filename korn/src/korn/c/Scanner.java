/* The following code was generated by JFlex 1.7.0 */

package korn.c;

import beaver.Symbol;
import java.util.Set;
import scala.math.BigInt;
import korn.c.Parser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>korn/src/korn/c/Scanner.flex</tt>
 */
public class Scanner extends beaver.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\20\1\21\1\1\22\0\1\3\1\35\1\107"+
    "\1\17\1\0\1\44\1\47\1\105\1\24\1\25\1\23\1\32\1\54"+
    "\1\10\1\33\1\22\1\103\1\72\1\73\5\4\1\74\1\4\1\53"+
    "\1\55\1\45\1\46\1\34\1\52\1\0\1\6\1\61\2\6\1\7"+
    "\1\12\5\5\1\14\10\5\1\16\2\5\1\104\2\5\1\26\1\106"+
    "\1\27\1\50\1\60\1\0\1\62\1\64\1\65\1\57\1\42\1\11"+
    "\1\71\1\66\1\40\1\5\1\101\1\13\1\75\1\70\1\43\1\77"+
    "\1\5\1\67\1\37\1\63\1\15\1\56\1\100\1\102\1\76\1\41"+
    "\1\30\1\51\1\31\1\36\6\0\1\20\u1fa2\0\1\20\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\4\4\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\3\4\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\11\4\1\3\2\1\1\0\1\3\1\35\1\36\1\37"+
    "\1\40\3\4\2\0\1\4\1\0\2\2\1\0\1\41"+
    "\1\42\1\43\1\44\4\4\1\45\4\4\1\46\1\47"+
    "\1\50\1\51\1\52\1\4\1\53\12\4\4\0\1\54"+
    "\1\35\1\0\1\35\1\4\1\55\3\4\2\0\6\4"+
    "\1\56\25\4\1\57\1\60\1\4\1\61\2\4\1\0"+
    "\6\4\1\62\1\63\2\4\1\64\15\4\1\65\1\66"+
    "\1\4\1\67\1\4\1\57\1\70\1\0\1\4\1\71"+
    "\4\4\1\72\13\4\1\73\1\4\1\74\1\2\2\4"+
    "\1\75\3\0\1\4\1\76\1\77\1\100\1\101\1\4"+
    "\1\102\10\4\1\103\3\0\7\4\1\104\1\4\3\0"+
    "\1\105\2\4\2\0\2\4\1\106\1\107\2\0\2\4"+
    "\1\2\1\4\2\0\1\110\2\4\1\0\1\110\2\4"+
    "\1\0\2\4\1\111\1\4\4\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\u03a8\0\u03f0\0\u0438\0\u0480\0\110"+
    "\0\u04c8\0\u0510\0\u0558\0\u0360\0\u05a0\0\u05e8\0\u0630\0\u0360"+
    "\0\u0678\0\110\0\110\0\110\0\110\0\u06c0\0\u0708\0\u0750"+
    "\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\110\0\110\0\110\0\u0af8"+
    "\0\u0b40\0\u0b88\0\u0990\0\u09d8\0\u0bd0\0\u02d0\0\u0c18\0\110"+
    "\0\u0c60\0\110\0\u0360\0\110\0\110\0\u0ca8\0\u0cf0\0\u0d38"+
    "\0\u0d80\0\u0120\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0360\0\110"+
    "\0\110\0\110\0\110\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008"+
    "\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248"+
    "\0\u1290\0\u12d8\0\u1320\0\110\0\u1368\0\u13b0\0\110\0\u13f8"+
    "\0\u0120\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0"+
    "\0\u1638\0\u1680\0\u16c8\0\u1710\0\u0120\0\u1758\0\u17a0\0\u17e8"+
    "\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\110\0\u1d88\0\u1dd0\0\u1e18\0\u1e60"+
    "\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u0120"+
    "\0\u0120\0\u20a0\0\u20e8\0\u0120\0\u2130\0\u2178\0\u21c0\0\u2208"+
    "\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448"+
    "\0\u2490\0\u0120\0\u0120\0\u24d8\0\u0120\0\u2520\0\u2568\0\u0120"+
    "\0\u25b0\0\u25f8\0\u0120\0\u2640\0\u2688\0\u26d0\0\u2718\0\u0120"+
    "\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u0120\0\u2a78\0\u0120\0\u0120\0\u2ac0"+
    "\0\u2b08\0\u0120\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u2c70\0\u0120\0\u2cb8\0\u2d00\0\u2d48\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u0120\0\u2ef8\0\u2f40\0\u2f88"+
    "\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u0120"+
    "\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u0120\0\u32e8\0\u3330\0\u3378"+
    "\0\u33c0\0\u3408\0\u3450\0\u0120\0\110\0\u3498\0\u34e0\0\u3528"+
    "\0\u3570\0\u33c0\0\u35b8\0\u3600\0\u3648\0\u0120\0\u3690\0\u36d8"+
    "\0\u3720\0\110\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\110"+
    "\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u39f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\3\5\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\5\1\13\1\2\1\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\5\1\33\1\5"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\5\1\51\1\52"+
    "\1\53\1\5\1\54\1\5\1\55\3\4\3\5\1\56"+
    "\2\5\1\57\1\5\1\60\1\2\1\61\111\0\3\3"+
    "\15\0\1\3\72\0\1\4\2\0\1\62\3\0\4\63"+
    "\14\0\1\64\6\0\1\62\27\0\3\4\6\0\1\4"+
    "\10\0\4\5\1\0\6\5\20\0\5\5\12\0\27\5"+
    "\13\0\1\65\23\0\1\66\11\0\1\67\45\0\4\5"+
    "\1\0\2\5\1\70\3\5\20\0\4\5\1\71\12\0"+
    "\27\5\7\0\4\5\1\0\6\5\20\0\4\5\1\72"+
    "\12\0\27\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\27\5\1\73\1\0\1\74\4\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\12\5\1\75\14\5\3\0"+
    "\1\76\1\77\1\100\15\76\2\0\66\76\22\0\1\76"+
    "\1\101\22\0\1\67\107\0\1\67\73\0\1\102\13\0"+
    "\1\67\45\0\1\64\65\0\3\64\6\0\1\64\40\0"+
    "\1\103\11\0\1\104\107\0\1\105\45\0\4\5\1\0"+
    "\6\5\20\0\1\5\1\106\3\5\12\0\5\5\1\107"+
    "\2\5\1\110\11\5\1\111\4\5\7\0\4\5\1\0"+
    "\1\112\5\5\20\0\5\5\12\0\12\5\1\113\14\5"+
    "\7\0\4\5\1\0\2\5\1\114\3\5\20\0\5\5"+
    "\12\0\12\5\1\115\11\5\1\116\2\5\50\0\1\117"+
    "\1\120\107\0\1\121\107\0\1\67\1\122\106\0\1\67"+
    "\2\0\1\123\42\0\4\5\1\0\6\5\20\0\4\5"+
    "\1\124\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\4\5\1\125\12\0\27\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\2\5\1\126\1\127\23\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\20\5\1\130"+
    "\6\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\11\5\1\131\15\5\7\0\4\5\1\0\6\5\20\0"+
    "\4\5\1\132\12\0\4\5\1\133\3\5\1\134\16\5"+
    "\7\0\4\5\1\0\6\5\20\0\3\5\1\135\1\5"+
    "\12\0\27\5\7\0\4\5\1\0\6\5\20\0\4\5"+
    "\1\136\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\10\5\1\137\16\5\7\0\1\4\2\0"+
    "\1\62\3\0\4\63\14\0\1\64\6\0\1\62\27\0"+
    "\3\4\5\0\1\140\1\4\1\140\3\0\105\141\1\0"+
    "\1\142\1\141\106\74\1\143\1\144\4\0\1\145\3\0"+
    "\1\146\21\0\1\146\37\0\3\145\6\0\1\145\17\0"+
    "\4\63\75\0\1\64\2\0\1\62\1\0\4\147\25\0"+
    "\1\62\27\0\3\64\6\0\1\64\10\0\4\5\1\0"+
    "\6\5\20\0\4\5\1\150\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\11\5\1\151\15\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\12\5"+
    "\1\152\14\5\7\0\4\5\1\0\6\5\20\0\1\153"+
    "\1\154\3\5\12\0\27\5\5\0\1\100\105\0\23\155"+
    "\1\156\64\155\4\0\4\5\1\0\6\5\20\0\2\5"+
    "\1\157\2\5\12\0\13\5\1\160\13\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\4\5\1\161\4\5"+
    "\1\162\15\5\7\0\4\5\1\0\6\5\20\0\4\5"+
    "\1\163\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\5\1\164\3\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\5\5\1\165\21\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\166\4\5\12\0\27\5"+
    "\7\0\4\5\1\0\4\5\1\167\1\5\20\0\5\5"+
    "\12\0\27\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\5\5\1\170\21\5\7\0\4\5\1\0\2\5"+
    "\1\171\3\5\20\0\1\5\1\172\3\5\12\0\27\5"+
    "\7\0\4\5\1\0\4\5\1\173\1\5\20\0\5\5"+
    "\12\0\27\5\7\0\4\5\1\0\1\174\5\5\20\0"+
    "\1\5\1\175\1\5\1\176\1\5\12\0\4\5\1\177"+
    "\2\5\1\200\1\5\1\201\15\5\7\0\4\5\1\0"+
    "\6\5\20\0\4\5\1\202\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\21\5\1\203\5\5"+
    "\7\0\4\5\1\0\6\5\20\0\3\5\1\204\1\5"+
    "\12\0\27\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\12\5\1\205\14\5\7\0\4\5\1\0\6\5"+
    "\20\0\1\206\4\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\4\5\1\207\22\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\5\5\1\210"+
    "\21\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\5\5\1\211\21\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\5\1\212\3\5\12\0\27\5\7\0\1\213\1\0"+
    "\2\213\1\0\2\213\27\0\1\213\14\0\1\213\1\0"+
    "\2\213\1\0\2\213\4\0\3\213\6\0\1\213\4\0"+
    "\105\141\1\214\1\142\2\141\2\0\15\141\2\0\66\141"+
    "\1\74\2\0\15\74\2\0\66\74\4\0\1\145\4\0"+
    "\4\147\55\0\3\145\6\0\1\145\10\0\1\145\65\0"+
    "\3\145\6\0\1\145\10\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\4\5\1\215\22\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\13\5\1\216\13\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\5\1\217\3\5\12\0"+
    "\27\5\7\0\4\5\1\0\6\5\20\0\4\5\1\220"+
    "\12\0\27\5\3\0\23\155\1\221\64\155\22\0\1\100"+
    "\1\156\70\0\4\5\1\0\6\5\20\0\3\5\1\222"+
    "\1\5\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\12\5\1\223\14\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\5\5\1\224\21\5\7\0"+
    "\4\5\1\0\4\5\1\225\1\5\20\0\5\5\12\0"+
    "\27\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\11\5\1\226\15\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\5\5\1\227\21\5\7\0\4\5\1\0"+
    "\6\5\20\0\3\5\1\230\1\5\12\0\27\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\17\5\1\231"+
    "\7\5\7\0\4\5\1\0\6\5\20\0\3\5\1\232"+
    "\1\5\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\4\5\1\233\22\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\1\5\1\234\25\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\6\5\1\235"+
    "\20\5\7\0\4\5\1\0\2\5\1\236\3\5\20\0"+
    "\5\5\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\12\5\1\237\14\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\24\5\1\240\2\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\241\4\5\12\0\5\5"+
    "\1\242\21\5\7\0\4\5\1\0\6\5\20\0\4\5"+
    "\1\243\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\3\5\1\244\1\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\4\5\1\245\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\3\5\1\246\1\5\12\0\27\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\4\5"+
    "\1\247\22\5\7\0\4\5\1\0\6\5\20\0\1\250"+
    "\4\5\12\0\5\5\1\251\21\5\7\0\4\5\1\0"+
    "\6\5\20\0\3\5\1\252\1\5\12\0\27\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\11\5\1\253"+
    "\15\5\7\0\4\5\1\0\4\5\1\254\1\5\20\0"+
    "\5\5\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\4\5\1\255\12\0\27\5\7\0\4\5\1\0\2\5"+
    "\1\256\3\5\20\0\5\5\12\0\27\5\7\0\1\213"+
    "\1\0\2\213\1\0\2\213\4\257\23\0\1\213\14\0"+
    "\1\213\1\0\2\213\1\0\2\213\4\0\3\213\6\0"+
    "\1\213\10\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\5\5\1\260\21\5\4\0\3\261\4\5\1\0\6\5"+
    "\2\0\1\261\15\0\5\5\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\13\5\1\262\13\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\12\5"+
    "\1\263\14\5\3\0\22\155\1\100\1\221\64\155\4\0"+
    "\4\5\1\0\6\5\20\0\4\5\1\264\12\0\27\5"+
    "\7\0\4\5\1\0\6\5\20\0\3\5\1\265\1\5"+
    "\12\0\27\5\7\0\4\5\1\0\6\5\20\0\1\5"+
    "\1\266\3\5\12\0\27\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\7\5\1\267\17\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\5\5\1\270\21\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\7\5"+
    "\1\271\17\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\11\5\1\272\15\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\5\5\1\273\21\5\7\0\4\5"+
    "\1\0\2\5\1\274\3\5\20\0\5\5\12\0\27\5"+
    "\7\0\4\5\1\0\6\5\20\0\4\5\1\275\12\0"+
    "\27\5\7\0\4\5\1\0\2\5\1\276\3\5\20\0"+
    "\5\5\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\5\5\1\277\21\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\17\5\1\300\7\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\5\5\1\301"+
    "\21\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\12\5\1\302\14\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\303\4\5\12\0\27\5\7\0\4\5\1\0\2\5"+
    "\1\304\3\5\20\0\5\5\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\1\5\1\305\25\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\23\5"+
    "\1\306\3\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\5\5\1\307\21\5\7\0\4\5\1\0\6\5"+
    "\20\0\1\5\1\310\3\5\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\11\5\1\311\15\5"+
    "\7\0\4\5\1\0\6\5\20\0\3\5\1\312\1\5"+
    "\12\0\27\5\16\0\4\257\72\0\3\261\7\0\1\313"+
    "\1\0\1\314\3\0\1\261\35\0\1\315\34\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\12\5\1\316\14\5"+
    "\7\0\4\5\1\0\1\317\5\5\20\0\5\5\12\0"+
    "\27\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\1\5\1\320\25\5\7\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\7\5\1\307\17\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\5\5\1\321\21\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\10\5\1\322"+
    "\16\5\7\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\12\5\1\307\14\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\5\1\323\3\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\3\5\1\324\1\5\12\0\27\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\4\5\1\325"+
    "\22\5\7\0\4\5\1\0\6\5\20\0\1\5\1\326"+
    "\3\5\12\0\27\5\7\0\4\5\1\0\6\5\20\0"+
    "\3\5\1\327\1\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\2\5\1\330\24\5\7\0"+
    "\4\5\1\0\6\5\20\0\5\5\12\0\11\5\1\331"+
    "\15\5\7\0\4\5\1\0\6\5\20\0\1\250\4\5"+
    "\12\0\27\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\5\5\1\332\21\5\7\0\4\5\1\0\6\5"+
    "\20\0\3\5\1\333\1\5\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\12\5\1\334\14\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\12\5"+
    "\1\335\14\5\46\0\1\336\134\0\1\337\62\0\1\340"+
    "\50\0\4\5\1\0\6\5\20\0\3\5\1\341\1\5"+
    "\12\0\27\5\7\0\4\5\1\0\2\5\1\342\3\5"+
    "\20\0\5\5\12\0\27\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\5\5\1\343\21\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\12\5\1\342\14\5"+
    "\7\0\4\5\1\0\6\5\20\0\5\5\12\0\12\5"+
    "\1\344\14\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\2\5\1\345\24\5\7\0\4\5\1\0\6\5"+
    "\20\0\1\5\1\346\3\5\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\11\5\1\347\15\5"+
    "\7\0\4\5\1\0\1\350\5\5\20\0\5\5\12\0"+
    "\27\5\7\0\4\5\1\0\4\5\1\351\1\5\20\0"+
    "\5\5\12\0\27\5\73\0\1\352\56\0\1\353\65\0"+
    "\1\354\76\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\1\5\1\355\25\5\7\0\4\5\1\0\6\5\20\0"+
    "\3\5\1\307\1\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\14\5\1\356\12\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\357\4\5\12\0\27\5"+
    "\4\0\3\360\4\5\1\0\6\5\2\0\1\360\2\0"+
    "\1\361\12\0\5\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\6\5\1\362\20\5\7\0"+
    "\4\5\1\0\6\5\20\0\1\5\1\363\3\5\12\0"+
    "\27\5\7\0\4\5\1\0\6\5\20\0\3\5\1\364"+
    "\1\5\12\0\27\5\74\0\1\365\56\0\1\366\133\0"+
    "\1\367\27\0\4\5\1\0\6\5\20\0\5\5\12\0"+
    "\15\5\1\370\11\5\7\0\4\5\1\0\6\5\20\0"+
    "\1\5\1\371\3\5\12\0\27\5\4\0\3\360\15\0"+
    "\1\360\2\0\1\361\63\0\1\361\2\0\15\361\2\0"+
    "\3\361\1\372\62\361\4\0\4\5\1\0\4\5\1\373"+
    "\1\5\20\0\5\5\12\0\27\5\7\0\4\5\1\0"+
    "\6\5\20\0\5\5\12\0\7\5\1\250\17\5\74\0"+
    "\1\374\31\0\1\375\100\0\4\5\1\0\6\5\20\0"+
    "\5\5\12\0\16\5\1\376\10\5\7\0\4\5\1\0"+
    "\6\5\20\0\4\5\1\377\12\0\27\5\7\0\4\5"+
    "\1\0\6\5\20\0\5\5\12\0\5\5\1\u0100\21\5"+
    "\73\0\1\u0101\61\0\1\u0102\51\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\12\5\1\u0103\14\5\7\0\4\5"+
    "\1\0\6\5\20\0\3\5\1\u0104\1\5\12\0\27\5"+
    "\45\0\1\u0105\51\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\2\5\1\u0106\24\5\7\0\4\5\1\0\6\5"+
    "\20\0\5\5\12\0\2\5\1\u0107\24\5\62\0\1\u0108"+
    "\34\0\4\5\1\0\6\5\20\0\5\5\12\0\2\5"+
    "\1\307\24\5\7\0\4\5\1\0\6\5\20\0\5\5"+
    "\12\0\2\5\1\u0109\24\5\4\0\3\u010a\4\5\1\0"+
    "\6\5\2\0\1\u010a\2\0\1\u010b\12\0\5\5\12\0"+
    "\27\5\4\0\3\u010a\15\0\1\u010a\2\0\1\u010b\107\0"+
    "\1\u010c\63\0\1\u010c\2\0\15\u010c\2\0\3\u010c\1\u010d"+
    "\63\u010c\2\0\15\u010c\2\0\3\u010c\1\u010e\62\u010c";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\6\11\4\1\1\11\11\1\4\11"+
    "\14\1\1\0\2\1\3\11\3\1\2\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\11\1\1\2\11\12\1\4\11"+
    "\14\1\4\0\1\11\1\1\1\0\1\11\5\1\2\0"+
    "\35\1\1\11\4\1\1\0\37\1\1\0\31\1\3\0"+
    "\20\1\3\0\11\1\3\0\3\1\2\0\3\1\1\11"+
    "\2\0\4\1\2\0\3\1\1\0\1\11\2\1\1\0"+
    "\2\1\1\11\1\1\4\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Set<String> types;

  	public final String yytext(int from) {
    	return new String( zzBuffer, zzStartRead + from, zzMarkedPos-zzStartRead-from );
  	}
	
	long parseLong(String text) {
		return Long.parseLong(text.replaceAll("([uUlL])", ""));
	}
	
	long parseLong(String text, int base) {
		return Long.parseLong(text.replaceAll("([uUlL])", ""), base);
	}
	
	double parseDouble(String text) {
		return Double.parseDouble(text.replaceAll("([fFlL])", ""));
	}

    Symbol resolve(String name) {
    	if(types.contains(name)) {
    		return newToken(Terminals.TYPE, name);
    	} else {
    		return newToken(Terminals.ID,   name);
    	}
    }

	Symbol newToken(short id)
	{
		return newToken(id, yytext());
	}

	Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return newToken(Terminals.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Scanner.Exception("unexpected character '" + yytext() + "'");
            } 
            // fall through
          case 74: break;
          case 2: 
            { 
            } 
            // fall through
          case 75: break;
          case 3: 
            { return newToken(Terminals.CONST, parseLong(yytext()));
            } 
            // fall through
          case 76: break;
          case 4: 
            { return resolve(yytext());
            } 
            // fall through
          case 77: break;
          case 5: 
            { return newToken(Terminals.MINUS);
            } 
            // fall through
          case 78: break;
          case 6: 
            { return newToken(Terminals.DIV);
            } 
            // fall through
          case 79: break;
          case 7: 
            { return newToken(Terminals.STAR);
            } 
            // fall through
          case 80: break;
          case 8: 
            { return newToken(Terminals.LPAREN);
            } 
            // fall through
          case 81: break;
          case 9: 
            { return newToken(Terminals.RPAREN);
            } 
            // fall through
          case 82: break;
          case 10: 
            { return newToken(Terminals.LBRACK);
            } 
            // fall through
          case 83: break;
          case 11: 
            { return newToken(Terminals.RBRACK);
            } 
            // fall through
          case 84: break;
          case 12: 
            { return newToken(Terminals.LBRACE);
            } 
            // fall through
          case 85: break;
          case 13: 
            { return newToken(Terminals.RBRACE);
            } 
            // fall through
          case 86: break;
          case 14: 
            { return newToken(Terminals.PLUS);
            } 
            // fall through
          case 87: break;
          case 15: 
            { return newToken(Terminals.DOT);
            } 
            // fall through
          case 88: break;
          case 16: 
            { return newToken(Terminals.GT);
            } 
            // fall through
          case 89: break;
          case 17: 
            { return newToken(Terminals.BANG);
            } 
            // fall through
          case 90: break;
          case 18: 
            { return newToken(Terminals.TILDE);
            } 
            // fall through
          case 91: break;
          case 19: 
            { return newToken(Terminals.MOD);
            } 
            // fall through
          case 92: break;
          case 20: 
            { return newToken(Terminals.LT);
            } 
            // fall through
          case 93: break;
          case 21: 
            { return newToken(Terminals.ASG);
            } 
            // fall through
          case 94: break;
          case 22: 
            { return newToken(Terminals.AMP);
            } 
            // fall through
          case 95: break;
          case 23: 
            { return newToken(Terminals.CARET);
            } 
            // fall through
          case 96: break;
          case 24: 
            { return newToken(Terminals.PIPE);
            } 
            // fall through
          case 97: break;
          case 25: 
            { return newToken(Terminals.QUESTION);
            } 
            // fall through
          case 98: break;
          case 26: 
            { return newToken(Terminals.COLON);
            } 
            // fall through
          case 99: break;
          case 27: 
            { return newToken(Terminals.COMMA);
            } 
            // fall through
          case 100: break;
          case 28: 
            { return newToken(Terminals.SEMICOLON);
            } 
            // fall through
          case 101: break;
          case 29: 
            { return newToken(Terminals.CONST, parseDouble(yytext()));
            } 
            // fall through
          case 102: break;
          case 30: 
            { return newToken(Terminals.DECR);
            } 
            // fall through
          case 103: break;
          case 31: 
            { return newToken(Terminals.ARROW);
            } 
            // fall through
          case 104: break;
          case 32: 
            { return newToken(Terminals.ASG_OP, yytext());
            } 
            // fall through
          case 105: break;
          case 33: 
            { return newToken(Terminals.INCR);
            } 
            // fall through
          case 106: break;
          case 34: 
            { return newToken(Terminals.SHR);
            } 
            // fall through
          case 107: break;
          case 35: 
            { return newToken(Terminals.GE);
            } 
            // fall through
          case 108: break;
          case 36: 
            { return newToken(Terminals.NEQ);
            } 
            // fall through
          case 109: break;
          case 37: 
            { return newToken(Terminals.IF);
            } 
            // fall through
          case 110: break;
          case 38: 
            { return newToken(Terminals.SHL);
            } 
            // fall through
          case 111: break;
          case 39: 
            { return newToken(Terminals.LE);
            } 
            // fall through
          case 112: break;
          case 40: 
            { return newToken(Terminals.EQ);
            } 
            // fall through
          case 113: break;
          case 41: 
            { return newToken(Terminals.AND);
            } 
            // fall through
          case 114: break;
          case 42: 
            { return newToken(Terminals.OR);
            } 
            // fall through
          case 115: break;
          case 43: 
            { return newToken(Terminals.DO);
            } 
            // fall through
          case 116: break;
          case 44: 
            { return newToken(Terminals.CONST, Parsing.str(yytext()));
            } 
            // fall through
          case 117: break;
          case 45: 
            { return newToken(Terminals.FOR);
            } 
            // fall through
          case 118: break;
          case 46: 
            { return newToken(Terminals.INT);
            } 
            // fall through
          case 119: break;
          case 47: 
            { return newToken(Terminals.CONST, parseLong(yytext(2), 16));
            } 
            // fall through
          case 120: break;
          case 48: 
            { return newToken(Terminals.CONST, Parsing.ch(yytext()));
            } 
            // fall through
          case 121: break;
          case 49: 
            { return newToken(Terminals.LONG);
            } 
            // fall through
          case 122: break;
          case 50: 
            { return newToken(Terminals.ELSE);
            } 
            // fall through
          case 123: break;
          case 51: 
            { return newToken(Terminals.ENUM);
            } 
            // fall through
          case 124: break;
          case 52: 
            { return newToken(Terminals.VOID);
            } 
            // fall through
          case 125: break;
          case 53: 
            { return newToken(Terminals.CASE);
            } 
            // fall through
          case 126: break;
          case 54: 
            { return newToken(Terminals.CHAR);
            } 
            // fall through
          case 127: break;
          case 55: 
            { return newToken(Terminals.GOTO);
            } 
            // fall through
          case 128: break;
          case 56: 
            { return newToken(Terminals.FLOAT);
            } 
            // fall through
          case 129: break;
          case 57: 
            { return newToken(Terminals.UNION);
            } 
            // fall through
          case 130: break;
          case 58: 
            { return newToken(Terminals.SHORT);
            } 
            // fall through
          case 131: break;
          case 59: 
            { return newToken(Terminals.BOOL);
            } 
            // fall through
          case 132: break;
          case 60: 
            { return newToken(Terminals.BREAK);
            } 
            // fall through
          case 133: break;
          case 61: 
            { return newToken(Terminals.WHILE);
            } 
            // fall through
          case 134: break;
          case 62: 
            { return newToken(Terminals.SIZEOF);
            } 
            // fall through
          case 135: break;
          case 63: 
            { return newToken(Terminals.SIGNED);
            } 
            // fall through
          case 136: break;
          case 64: 
            { return newToken(Terminals.STRUCT);
            } 
            // fall through
          case 137: break;
          case 65: 
            { return newToken(Terminals.SWITCH);
            } 
            // fall through
          case 138: break;
          case 66: 
            { return newToken(Terminals.DOUBLE);
            } 
            // fall through
          case 139: break;
          case 67: 
            { return newToken(Terminals.RETURN);
            } 
            // fall through
          case 140: break;
          case 68: 
            { return newToken(Terminals.TYPEDEF);
            } 
            // fall through
          case 141: break;
          case 69: 
            { return newToken(Terminals.UNSIGNED);
            } 
            // fall through
          case 142: break;
          case 70: 
            { return newToken(Terminals.CONTINUE);
            } 
            // fall through
          case 143: break;
          case 71: 
            { return newToken(Terminals.LONG_LONG);
            } 
            // fall through
          case 144: break;
          case 72: 
            { return newToken(Terminals.LONG_DOUBLE);
            } 
            // fall through
          case 145: break;
          case 73: 
            { return newToken(Terminals.LONG_UNSIGNED);
            } 
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
