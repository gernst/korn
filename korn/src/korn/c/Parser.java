package korn.c;

import java.util.Set;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short INCR = 1;
		static public final short DECR = 2;
		static public final short STAR = 3;
		static public final short PLUS = 4;
		static public final short MINUS = 5;
		static public final short ID = 6;
		static public final short AMP = 7;
		static public final short LPAREN = 8;
		static public final short CONST = 9;
		static public final short SIZEOF = 10;
		static public final short PREFIX = 11;
		static public final short POSTFIX = 12;
		static public final short BANG = 13;
		static public final short TILDE = 14;
		static public final short LBRACK = 15;
		static public final short ARROW = 16;
		static public final short DOT = 17;
		static public final short SEMICOLON = 18;
		static public final short DIV = 19;
		static public final short MOD = 20;
		static public final short SHL = 21;
		static public final short SHR = 22;
		static public final short STRUCT = 23;
		static public final short LBRACE = 24;
		static public final short UNION = 25;
		static public final short ENUM = 26;
		static public final short UNSIGNED = 27;
		static public final short LONG_UNSIGNED = 28;
		static public final short VOID = 29;
		static public final short BOOL = 30;
		static public final short FLOAT = 31;
		static public final short DOUBLE = 32;
		static public final short LONG_DOUBLE = 33;
		static public final short SIGNED = 34;
		static public final short TYPE = 35;
		static public final short LT = 36;
		static public final short LE = 37;
		static public final short GE = 38;
		static public final short GT = 39;
		static public final short EQ = 40;
		static public final short NEQ = 41;
		static public final short RBRACE = 42;
		static public final short COMMA = 43;
		static public final short RPAREN = 44;
		static public final short CARET = 45;
		static public final short PIPE = 46;
		static public final short ASG = 47;
		static public final short AND = 48;
		static public final short QUESTION = 49;
		static public final short OR = 50;
		static public final short ASG_OP = 51;
		static public final short WHILE = 52;
		static public final short TYPEDEF = 53;
		static public final short DO = 54;
		static public final short FOR = 55;
		static public final short IF = 56;
		static public final short GOTO = 57;
		static public final short CASE = 58;
		static public final short SWITCH = 59;
		static public final short RETURN = 60;
		static public final short BREAK = 61;
		static public final short CONTINUE = 62;
		static public final short INT = 63;
		static public final short COLON = 64;
		static public final short RBRACK = 65;
		static public final short CHAR = 66;
		static public final short SHORT = 67;
		static public final short LONG = 68;
		static public final short LONG_LONG = 69;
		static public final short ELSE = 70;

		static public final String[] NAMES = {
			"EOF",
			"INCR",
			"DECR",
			"STAR",
			"PLUS",
			"MINUS",
			"ID",
			"AMP",
			"LPAREN",
			"CONST",
			"SIZEOF",
			"PREFIX",
			"POSTFIX",
			"BANG",
			"TILDE",
			"LBRACK",
			"ARROW",
			"DOT",
			"SEMICOLON",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"STRUCT",
			"LBRACE",
			"UNION",
			"ENUM",
			"UNSIGNED",
			"LONG_UNSIGNED",
			"VOID",
			"BOOL",
			"FLOAT",
			"DOUBLE",
			"LONG_DOUBLE",
			"SIGNED",
			"TYPE",
			"LT",
			"LE",
			"GE",
			"GT",
			"EQ",
			"NEQ",
			"RBRACE",
			"COMMA",
			"RPAREN",
			"CARET",
			"PIPE",
			"ASG",
			"AND",
			"QUESTION",
			"OR",
			"ASG_OP",
			"WHILE",
			"TYPEDEF",
			"DO",
			"FOR",
			"IF",
			"GOTO",
			"CASE",
			"SWITCH",
			"RETURN",
			"BREAK",
			"CONTINUE",
			"INT",
			"COLON",
			"RBRACK",
			"CHAR",
			"SHORT",
			"LONG",
			"LONG_LONG",
			"ELSE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMNTy5DKM$kwMoMx45mXWGh4XHMAK8aKHIK1WQGb1846wZoAWeg8W0afJiM7lACQEM40" +
		"HK54KUnTH4GkAYWXsh2ZAVT$CdjsTdTtPR1OVF$zWzdVct7FElUSxv$P9WEmrUYsknDMu1T" +
		"VYUbK72z4RWt02Ug8NRiJDk1tZjLRP68Enc81JyBaoi0q$OYBEnWYCn8duBqRXKPo3RCp1Q" +
		"Eo3yx6QFXSXY5a8K7CkPg8SJwZ3aALQglQgiTfNrLG7gZpLGEsltqw9lYyceIRHJyFfE1EJ" +
		"Kw17lU3u12#FuC7aw2cnAr4Nyubz6Px2AboO0diWyl2abVq5pCVaYr2FsJV4RDoDcHbWzq4" +
		"fHXDx68RGsm4Pvlqytga#jdwF8pc0s9Um$Tl8oH3xrqpwN7#3RBs1s7$Z87Ky6cM8$KT6ux" +
		"qPEIQsted6#19DC#rprJS3x6#m3CkOzmFu1T$Yq0on2r2O0VPFn3w2s3lG4Z#ZVuROhT6c#" +
		"jZAf#eYczZjL7UY7fKXTWTqp02x39rGJEmkw4hKxXbYzq0cuzsF$Ln1xC4OYd4uAKFiwRZG" +
		"1JiNjT401#CGp41Rt66Jvo8VTR0Vr$Z#E11Dq4paloAosWSxkUSOyACv3iFXQ85ME5AL8AG" +
		"6eZsEnd4u1aKu5jriNiSHfSmcrnAl9pjGbZjHL6qx2lVP4EvoGr75QAkEiQ7K5w$Z72YB4r" +
		"3sIq2vFoNAiIAVYixqRdbLtHmePvXo5E4GrPKrdIWbAL5ws78vooMNAGcv79g0CZmbIYyRo" +
		"bJ9fKOyIZYtA481pjEV9en#5zVHdyVHpx795udN#ib6FuhI0XVZyhXShc0kAzrGzDT4UK$a" +
		"chWAruZNwnmeC#9GMk46t1I7ie2vD7BDvLRsMAHj42#IXxtU5aMfnCUOZtjuB$WFxiKwrC1" +
		"pyAaiUEDGLXAbcIlAGqG9OGc#i7Gnb2LHb3bHtGpU9jRnDh5M7OV7U9UoetnDb2DSKHucIZ" +
		"aZsUv0MPe4vVSmYYeboliE58wBQkj0IRKlFOwdyOpUW3Lu5YznPap3wrY1#vBiRh5Ot#Jel" +
		"e6tiC4Hw$eaiNx0M5zWZto8ZVZ44UicV8QjhZrIIPJv#DGQErDxgNZyAWxbUz4kmWz4MOBV" +
		"iCM1iafrPhrKg#vejllJr2a5BUi1YRae3nOfF$izeFw3x#9HL8wgfNBJxtTLJpLK1zXcxpH" +
		"rK5NzhWvcZ$ZWuUmrOssY8t4rZUuxpLMXz8TP8#AzI1qUroFX6kd7sXgLwaZUhzkOOw7QSO" +
		"wyN6MiHx5VErXHTBJUdGIrtB43X3E8HDe7EQfdNB$sKxrLVzVH6y0UWIdhToqjn2kIeL2R3" +
		"VDvXVHQN8$aMFhKCn7MJ3IVLnDGAbcsrzY5o6D7GHG5WkAEiIi1m$rnnuZvXzLJzcTt$MVc" +
		"szagsRnCtSePKNfOwRLojh2tgdv$fTfthKVbLrs7U$FkrjbhsslRQ$jtsgPn#TwPz2oDFTF" +
		"qPsdKsVGF#VdtrKb#ruX$tbLUV9Iqdjd3oJraOk6cRTt0VFpcDf2508AyLUp3BujzhNjg4S" +
		"nJf0ll4LrvXyZZgL6FtxuDq93dnW4yEGxYwTA8vuiNFJW739uK0HIW57tuJMvg#cC0TOLem" +
		"zEn7S$2etZITk19tf6tXKvfe8VIGa$bfO3uoT5JjIgXhY#n#t6EXvYDEtOvQtQsSXr1B9EN" +
		"iaKPgTJAllhO8SjBhl1GXdcxztggLW5Q2ebjMErpzcYV5qUnGxHacdTcsBdCrSGsUpr$3$T" +
		"vBWRpbujX$6ME7U8lC#oGXMtc7TZ3sCNMjr#8jZsVTyZAExHRustk39cixu257U1iAK95Xj" +
		"X66jZvR3N29e$XBA#9MfHgy$PVb$V$iDmdAeVtd5uyrHlpgw0flmlCl$aDvSmUpc#08$WLq" +
		"9BV6wtvnH7pMaIKGflSMRnME52CAb12HCbtHIadog0aA4N$DvGApi#YX1wovnP36CgQJfJ2" +
		"j7EfSCcb8erSqaU9v9ARTFHZ20NyfJ$weucIOvEBNL0C1qgGPwmT9IVbk1GJnH0vPFt2NaC" +
		"Eb7m7Ybap$HuB4INMrkHEbF2zeC2w5#JotZiGG#G#PKV9Juaoc2ZcAHVE9uOIcxanNJvl4I" +
		"VmDZ647itRX1t5I8aIj53o4r1QL1Cb9oLAilFNIsqksmGuiymRXBVAtQtG6btpvXWVQtwIM" +
		"0s9rSmjiKVC4zmjrXAYHCREr0uKZmLnA0MYBQMdCikZ4oKyGrAlEhETgHl5Eiuv5CibG9HU" +
		"H2bWVITABdkrk1hz7fBRIsJsvj5ULR#RypqyUqrT06CJOkrERLXdrh2lg$WvOjP8FzOs78i" +
		"0no8awoYFOr5Lh05hFfjo#5qeg8SvTe181f58pVyEsMFjnPQ6QwoSYLfBR$3DikMFF0aAjL" +
		"xD1mOf4DyZbZxbJAITsLlr1YQWbB0SLqFBOqSH3L7u3gDK0qExFYamelufPJbQxQR$p7mxM" +
		"oMTbobREIDA3okzLiuMSQsgtryfrfJKpDqJTVRQzjhsslwbjZoktgHdgMq$oUEDOsyTrpfI" +
		"hz3bJkBQmnbPe2fcXV$cQ$wjjPQKCKi8o9uYkeF3N4tXgsFCpjiRFDjcnRN1FE6tI9iR0Mz" +
		"3AQy7VAlPfWxvTlBZ0N#8$4hMkOJyJUhBWK0DoZ#IrwVCE0E7qiRwWNRKDoRlIbv1plRUfy" +
		"X70bdNaqyaNq8#WtmwENrcqHPW35dToEyXpoD$532#8d#MxVkIhwMydFmJndCi#RVafvF$I" +
		"NvdB3S$u$VEYScU7K0m8ELbV7qYkMTHln$h$o6s5VHVI7vDMFOkj$UPdJZyRqkRsV7zwlb2" +
		"sZOIZ9eYzulLyOuLVf7mbRRsxuTvS1trcyJ#6UNDDko$O$MLGViszd#RiEoh4xFvsealZaM" +
		"mDVDaNmUBoHyaBsMkNlAXv1pdu0HoZbLmAlbWyWl9EIx1Qyddn#VeRKdzR$H$1kaoctwKuA" +
		"xaY$F5zup8hv8ssttOOcp1#HiWrp6TmR7sUy9bVpDI4v8YDMNTkLHoFcHVQQj$gzIL#U#dJ" +
		"p$NYfzpoD#9TM#bydC7RXbjxMdZtFNlJ#fFwYssQrZkJXldWj#CvKHIkTWUOvzF2fUpwTi$" +
		"Y2JhqxU1jgLYC$sF8CqGspUqVI$niL#LcSzCaJdVbHdl0jkuTZN$zK7T7FRr7SoHtCz#pJR" +
		"NSc6i7iwb$YR7#6mLlrp3$bLIVe5q1GiYAysNpFkizH9Z0wdxhl3tX6zX34jfvvnHxKMtYp" +
		"hwzyscRZ9bZh5Q9kCHfErrshX#rVQmpiCnCRZUZBQqVKWRrxNHKkgNi3t7mU3QpzfAteFj6" +
		"fAtOhjJfOxCPT$YM9uUxW46#oEBwzyOoJQSjmPZzDnlwqVkCPu9CTbWh8Ovvo#WhuqnlVzs" +
		"czyraJBNsXRIffZDrpk#hn6qoyc8psXRMTO#Bf7uVC8DuLs4TnK#H$X2uRS9ZupZQk4V2zy" +
		"eVAVmNP9JVU4onXxfJu#Cf#TeuHs4TnG#o97Bt5ZPCq3ucJPxRvjzigFjFBjS5Td7JMJP6x" +
		"tju$NURhRoASAdkldbU6wCRu#HulzgaKFYuwduUlxcDXoPrxxQaJsNlAxmUiAR2oyGtafui" +
		"V0#oVF6KBVOEPxZfUr8jphnzNrp4tKeSgdRNVAKlTVt1Si$XCl6H9SsvwJ0Nk5kyzT87RS$" +
		"QOnYc#HkKuuve#wDbptSG$tSRup8tZinPlCzGFbiczmbLOo9s9vVOcLlC$6$iEfs$iUapI2" +
		"RxddHpHU#scQJVJaw1nlRR3kI#EylyMbfrrhqQstnhX3U8wOpAYcF4VsDeciIxzjeaJetnJ" +
		"k5vhr3lwMdwtNwJRvv6zE$cpRzXlxDuhlqdPfddBwTL6bfRYFnfgYl8$46edaYwwj9Lv5u2" +
		"zKyoVJbfFcaoqYNadYgwej95v7caNY3qHTOGK2VJ#BDGVCKrRFrW$e1AwRxpLZ8xz6B#Lva" +
		"bJ$Gzqd4TvFkqhFqJ7sUFbVp7D7dwAbwYZvRJoO$YtIcFbrF8Zz3dyRtHD8fh7MgFfdl2PQ" +
		"FaqnV#dChvnrwYqIpJU$KM$KV#a$zboKl9F6EecyXBI3TJBg9nFkmla7$hR$KNqbCO$LcpL" +
		"MfnucdZpJlmdgZ7gC$rjFq#6YjU$M7nFWLybZQwVf7nh1J$qBwESxoazwkNu$4R6bV8usFI" +
		"gzQjbV2idxHihqiqWjcDFebgVcSzHwZdxSotgb$uFjxGNbMhx7uUlsEvjU0VjAgkoeSXNv2" +
		"B#RxSPPvmz9SfPgtSRqy4gL#D5fQHdeaAZqSYTAIbuQnOjdf9VfzwVrlpOXibeVqTrRf6Vr" +
		"qLCiR3HPWBAzU9Vn#xalUbr$I$QZjnxBvNu4#BFUn$ZUWI5wSO96F5CGGwePG7cgH7yCf3s" +
		"TvDDkCPda4wusWF8RbCUIb5lbHHhcCFWUmtW2M#vC6M#J5CF9XvENavUIyRrh$i#l5yYZoK" +
		"UGZoKUoFUz2rb$gJoJrjiWWPPC2GbuR6K9#MzcaB26l#F18sIVSO#CUQU#NDX4Uj713R1yc" +
		"hwFi8$c5c#GHyjhidYh8#m#HFqxkmHYTr9FzsjCgUy3zZ6IMlPOSvlQoifMTkWZvedJI$m3" +
		"Ps0Us");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

    Set<String> types;

    Symbol s(Object x) {
        return new Symbol(x);
    }
    
    Symbol s(Symbol h, Stmt x) {
        int a = h.getStart();
        x.here(h.getLine(a), h.getColumn(a));
        return new Symbol(x);
    }

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = stmts.ss
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 1];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Stmt[] ss = _list_ss == null ? new Stmt[0] : (Stmt[]) _list_ss.toArray(new Stmt[_list_ss.size()]);
					 return s(new Block(ss));
				}
			},
			RETURN2,	// [1] bound = LBRACK expr.e RBRACK
			new Action() {	// [2] lst$bound = bound
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [3] lst$bound = lst$bound bound
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [4] opt$lst$bound = 
			Action.RETURN,	// [5] opt$lst$bound = lst$bound
			Action.RETURN,	// [6] bounds = opt$lst$bound
			new Action() {	// [7] ptrs = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(0);
				}
			},
			new Action() {	// [8] ptrs = ptrs.ps STAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 1];
					final int ps = (int) _symbol_ps.value;
					 return s(ps + 1);
				}
			},
			new Action() {	// [9] dims = bounds.bs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bs = _symbols[offset + 1];
					final ArrayList _list_bs = (ArrayList) _symbol_bs.value;
					final Expr[] bs = _list_bs == null ? new Expr[0] : (Expr[]) _list_bs.toArray(new Expr[_list_bs.size()]);
					 return s(new Dims(false, bs));
				}
			},
			new Action() {	// [10] dims = LBRACK RBRACK bounds.bs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bs = _symbols[offset + 3];
					final ArrayList _list_bs = (ArrayList) _symbol_bs.value;
					final Expr[] bs = _list_bs == null ? new Expr[0] : (Expr[]) _list_bs.toArray(new Expr[_list_bs.size()]);
					 return s(new Dims(true, bs));
				}
			},
			new Action() {	// [11] param = type.t ptrs.x dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new ParamSpec(Parsing.wrap(t, x), ds));
				}
			},
			new Action() {	// [12] param = type.t ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 4];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new ParamSpec(Parsing.wrap(t, x), n, ds));
				}
			},
			new Action() {	// [13] param = type.t ptrs.x LPAREN STAR ID.n RPAREN LPAREN params.ps RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 5];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 8];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 return s(new ParamSpec(new FunPtrType(Parsing.wrap(t, x), Parsing.params(ps)), n));
				}
			},
			new Action() {	// [14] params = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] params = params COMMA param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [16] var = ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new VarSpec(x, n, ds));
				}
			},
			new Action() {	// [17] var = ptrs.x ID.n dims.ds ASG expr.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					final Symbol _symbol_i = _symbols[offset + 5];
					final Expr i = (Expr) _symbol_i.value;
					 return s(new VarSpec(x, n, ds, i));
				}
			},
			new Action() {	// [18] vars = var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [19] vars = vars COMMA var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [20] opt$ID = 
			Action.RETURN,	// [21] opt$ID = ID
			new Action() {	// [22] field = ptrs.x opt$ID.n COLON CONST
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new FieldSpec(x, n));
				}
			},
			new Action() {	// [23] field = ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new FieldSpec(x, n, ds));
				}
			},
			new Action() {	// [24] fields_ = field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [25] fields_ = fields_ COMMA field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [26] fields__ = type.t fields_.fs SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_fs = _symbols[offset + 2];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final FieldSpec[] fs = _list_fs == null ? new FieldSpec[0] : (FieldSpec[]) _list_fs.toArray(new FieldSpec[_list_fs.size()]);
					 return s(new FieldsSpec(t, fs));
				}
			},
			new Action() {	// [27] fields__ = UNION LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new FlatUnionSpec(fs));
				}
			},
			new Action() {	// [28] lst$fields__ = fields__
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [29] lst$fields__ = lst$fields__ fields__
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [30] opt$lst$fields__ = 
			Action.RETURN,	// [31] opt$lst$fields__ = lst$fields__
			Action.RETURN,	// [32] fields = opt$lst$fields__
			new Action() {	// [33] const = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(new Const(n));
				}
			},
			new Action() {	// [34] const = ID.n ASG CONST.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Object i = (Object) _symbol_i.value;
					 return s(new Const(n, i));
				}
			},
			new Action() {	// [35] consts = const
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [36] consts = consts COMMA const
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [37] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [38] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [39] exprs_ = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(new Expr[]{});
				}
			},
			new Action() {	// [40] exprs_ = exprs.es
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_es = _symbols[offset + 1];
					final ArrayList _list_es = (ArrayList) _symbol_es.value;
					final Expr[] es = _list_es == null ? new Expr[0] : (Expr[]) _list_es.toArray(new Expr[_list_es.size()]);
					 return s(es);
				}
			},
			new Action() {	// [41] block = LBRACE stmts.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Stmt[] ss = _list_ss == null ? new Stmt[0] : (Stmt[]) _list_ss.toArray(new Stmt[_list_ss.size()]);
					 return s(new Block(ss));
				}
			},
			Action.RETURN,	// [42] fun = ID.n
			RETURN2,	// [43] fun = LPAREN ID.n RPAREN
			new Action() {	// [44] lst$stmt = stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [45] lst$stmt = lst$stmt stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [46] opt$lst$stmt = 
			Action.RETURN,	// [47] opt$lst$stmt = lst$stmt
			Action.RETURN,	// [48] stmts = opt$lst$stmt
			Action.RETURN,	// [49] stmt = block
			new Action() {	// [50] stmt = TYPEDEF type.t ptrs.x ID.n dims.ds SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 5];
					final Dims ds = (Dims) _symbol_ds.value;
					 types.add(n);
                                                           return s(new TypeDef(Parsing.wrap(t.withDims(ds), x), n));
				}
			},
			new Action() {	// [51] stmt = TYPEDEF type.t ptrs.x LPAREN STAR ID.n RPAREN LPAREN params.ps RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 6];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 9];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 types.add(n);
                                                           return s(new TypeDef(new FunPtrType(Parsing.wrap(t, x), Parsing.params(ps)), n));
				}
			},
			new Action() {	// [52] stmt = TYPEDEF STRUCT ID.m LBRACE fields.fs RBRACE ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 3];
					final String m = (String) _symbol_m.value;
					final Symbol _symbol_fs = _symbols[offset + 5];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					final Symbol _symbol_n = _symbols[offset + 7];
					final String n = (String) _symbol_n.value;
					 types.add(n);
                                                           return s(new Group(new StructDef(m, Parsing.members(fs)),
                                                                              new TypeDef(new StructName(m), n)));
				}
			},
			new Action() {	// [53] stmt = TYPEDEF UNION ID.m LBRACE fields.fs RBRACE ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 3];
					final String m = (String) _symbol_m.value;
					final Symbol _symbol_fs = _symbols[offset + 5];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					final Symbol _symbol_n = _symbols[offset + 7];
					final String n = (String) _symbol_n.value;
					 types.add(n);
                                                           return s(new Group(new UnionDef(m, Parsing.members(fs)),
                                                                              new TypeDef(new UnionName(m), n)));
				}
			},
			new Action() {	// [54] stmt = STRUCT ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new StructDecl(n));
				}
			},
			new Action() {	// [55] stmt = UNION ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new UnionDecl(n));
				}
			},
			new Action() {	// [56] stmt = ENUM ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new EnumDecl(n));
				}
			},
			new Action() {	// [57] stmt = STRUCT ID.n LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_fs = _symbols[offset + 4];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new StructDef(n, Parsing.members(fs)));
				}
			},
			new Action() {	// [58] stmt = UNION ID.n LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_fs = _symbols[offset + 4];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new UnionDef(n, Parsing.members(fs)));
				}
			},
			new Action() {	// [59] stmt = ENUM LBRACE consts.cs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cs = _symbols[offset + 3];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final Const[] cs = _list_cs == null ? new Const[0] : (Const[]) _list_cs.toArray(new Const[_list_cs.size()]);
					 return s(new EnumDef(cs));
				}
			},
			new Action() {	// [60] stmt = ENUM ID.n LBRACE consts.cs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_cs = _symbols[offset + 4];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final Const[] cs = _list_cs == null ? new Const[0] : (Const[]) _list_cs.toArray(new Const[_list_cs.size()]);
					 return s(new EnumDef(n, cs));
				}
			},
			new Action() {	// [61] stmt = type.t ptrs.x fun.n LPAREN RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					 return s(_symbol_n, new FunDecl(Parsing.wrap(t, x), n));
				}
			},
			new Action() {	// [62] stmt = type.t ptrs.x fun.n LPAREN RPAREN block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Block b = (Block) _symbol_b.value;
					 return s(_symbol_n, new FunDef(Parsing.wrap(t, x), n, b));
				}
			},
			new Action() {	// [63] stmt = type.t ptrs.x fun.n LPAREN params.ps RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 return s(_symbol_n, new FunDecl(Parsing.wrap(t, x), n, Parsing.params(ps)));
				}
			},
			new Action() {	// [64] stmt = type.t ptrs.x fun.n LPAREN params.ps RPAREN block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 7];
					final Block b = (Block) _symbol_b.value;
					 return s(_symbol_n, new FunDef(Parsing.wrap(t, x), n, Parsing.formals(ps), b));
				}
			},
			new Action() {	// [65] stmt = type.t vars.vs SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_vs = _symbols[offset + 2];
					final ArrayList _list_vs = (ArrayList) _symbol_vs.value;
					final VarSpec[] vs = _list_vs == null ? new VarSpec[0] : (VarSpec[]) _list_vs.toArray(new VarSpec[_list_vs.size()]);
					 return s(new Group(Parsing.vars(t, vs)));
				}
			},
			new Action() {	// [66] stmt = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Atomic.none());
				}
			},
			new Action() {	// [67] stmt = expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Atomic(a));
				}
			},
			new Action() {	// [68] stmt = GOTO ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new Goto(n));
				}
			},
			new Action() {	// [69] stmt = CASE CONST.n COLON stmt.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Object n = (Object) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s(new Case(n, s));
				}
			},
			new Action() {	// [70] stmt = ID.n COLON stmt.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s(new Label(n, s));
				}
			},
			new Action() {	// [71] stmt = RETURN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Return.none());
				}
			},
			new Action() {	// [72] stmt = RETURN expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Return(a));
				}
			},
			new Action() {	// [73] stmt = BREAK SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Break.self());
				}
			},
			new Action() {	// [74] stmt = CONTINUE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Continue.self());
				}
			},
			new Action() {	// [75] stmt = SWITCH LPAREN expr.e RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(new Switch(e, b));
				}
			},
			new Action() {	// [76] stmt = IF LPAREN expr.a RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(new If(a, b));
				}
			},
			new Action() {	// [77] stmt = IF LPAREN expr.a RPAREN stmt.b ELSE stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Stmt c = (Stmt) _symbol_c.value;
					 return s(new If(a, b, c));
				}
			},
			new Action() {	// [78] stmt = WHILE.w LPAREN expr.a RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(w, new While(a, b));
				}
			},
			new Action() {	// [79] stmt = DO.w stmt.b WHILE LPAREN expr.a RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Expr a = (Expr) _symbol_a.value;
					 return s(w, new DoWhile(b, a));
				}
			},
			new Action() {	// [80] stmt = FOR.w LPAREN exprs_.a SEMICOLON exprs_.b SEMICOLON exprs_.c RPAREN stmt.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr[] a = (Expr[]) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Expr[] b = (Expr[]) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Expr[] c = (Expr[]) _symbol_c.value;
					final Symbol _symbol_p = _symbols[offset + 9];
					final Stmt p = (Stmt) _symbol_p.value;
					 return s(w, new For(a, b, c, p));
				}
			},
			new Action() {	// [81] stmt = FOR.w LPAREN type.t vars.vs SEMICOLON exprs_.b SEMICOLON exprs_.c RPAREN stmt.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_vs = _symbols[offset + 4];
					final ArrayList _list_vs = (ArrayList) _symbol_vs.value;
					final VarSpec[] vs = _list_vs == null ? new VarSpec[0] : (VarSpec[]) _list_vs.toArray(new VarSpec[_list_vs.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Expr[] b = (Expr[]) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 8];
					final Expr[] c = (Expr[]) _symbol_c.value;
					final Symbol _symbol_p = _symbols[offset + 10];
					final Stmt p = (Stmt) _symbol_p.value;
					 return s(w, new For(Parsing.vars(t, vs), b, c, p));
				}
			},
			Action.RETURN,	// [82] expr = PREFIX
			Action.RETURN,	// [83] expr = POSTFIX
			RETURN2,	// [84] expr = LPAREN expr.e RPAREN
			new Action() {	// [85] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(new Id(n));
				}
			},
			new Action() {	// [86] expr = CONST.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Object n = (Object) _symbol_n.value;
					 return s(new Lit(n));
				}
			},
			new Action() {	// [87] expr = ID.n LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(new FunCall(n));
				}
			},
			new Action() {	// [88] expr = ID.n LPAREN exprs.as RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_as = _symbols[offset + 3];
					final ArrayList _list_as = (ArrayList) _symbol_as.value;
					final Expr[] as = _list_as == null ? new Expr[0] : (Expr[]) _list_as.toArray(new Expr[_list_as.size()]);
					 return s(new FunCall(n, as));
				}
			},
			new Action() {	// [89] expr = LPAREN type.t ptrs.x RPAREN expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Cast(Parsing.wrap(t, x), a));
				}
			},
			new Action() {	// [90] expr = SIZEOF LPAREN type.t RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					 return s(new SizeOfType(t));
				}
			},
			new Action() {	// [91] expr = SIZEOF LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					 return s(new SizeOfExpr(e));
				}
			},
			new Action() {	// [92] expr = expr.a INCR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PostOp("++", a));
				}
			},
			new Action() {	// [93] expr = expr.a DECR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PostOp("--", a));
				}
			},
			new Action() {	// [94] expr = expr.a ARROW ID.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					 return s(new Arrow(a, f));
				}
			},
			new Action() {	// [95] expr = expr.a DOT ID.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					 return s(new Dot(a, f));
				}
			},
			new Action() {	// [96] expr = expr.a LBRACK expr.i RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expr i = (Expr) _symbol_i.value;
					 return s(new Index(a, i));
				}
			},
			new Action() {	// [97] expr = INCR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("++", a));
				}
			},
			new Action() {	// [98] expr = DECR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("--", a));
				}
			},
			new Action() {	// [99] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("+", a));
				}
			},
			new Action() {	// [100] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("-", a));
				}
			},
			new Action() {	// [101] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("!", a));
				}
			},
			new Action() {	// [102] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("~", a));
				}
			},
			new Action() {	// [103] expr = STAR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("*", a));
				}
			},
			new Action() {	// [104] expr = AMP expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("&", a));
				}
			},
			new Action() {	// [105] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("*", a, b));
				}
			},
			new Action() {	// [106] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("/", a, b));
				}
			},
			new Action() {	// [107] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("%", a, b));
				}
			},
			new Action() {	// [108] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("+", a, b));
				}
			},
			new Action() {	// [109] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("-", a, b));
				}
			},
			new Action() {	// [110] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<<",a, b));
				}
			},
			new Action() {	// [111] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">>",a, b));
				}
			},
			new Action() {	// [112] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<", a, b));
				}
			},
			new Action() {	// [113] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<=",a, b));
				}
			},
			new Action() {	// [114] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">=",a, b));
				}
			},
			new Action() {	// [115] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">", a, b));
				}
			},
			new Action() {	// [116] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("==",a, b));
				}
			},
			new Action() {	// [117] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("!=",a, b));
				}
			},
			new Action() {	// [118] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("&", a, b));
				}
			},
			new Action() {	// [119] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("^", a, b));
				}
			},
			new Action() {	// [120] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("|", a, b));
				}
			},
			new Action() {	// [121] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("&&",a, b));
				}
			},
			new Action() {	// [122] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("||",a, b));
				}
			},
			new Action() {	// [123] expr = expr.a QUESTION expr.b COLON expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Expr c = (Expr) _symbol_c.value;
					 return s(new Question(a, b, c));
				}
			},
			new Action() {	// [124] expr = expr.a ASG expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("=", a, b));
				}
			},
			new Action() {	// [125] expr = expr.a ASG_OP.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final String e = (String) _symbol_e.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("=", a, new BinOp(e.substring(0, e.length() - 1), a, b)));
				}
			},
			new Action() {	// [126] expr = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(",", a, b));
				}
			},
			new Action() {	// [127] type = VOID
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._void());
				}
			},
			new Action() {	// [128] type = BOOL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._Bool());
				}
			},
			new Action() {	// [129] type = FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._float());
				}
			},
			new Action() {	// [130] type = DOUBLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._double());
				}
			},
			new Action() {	// [131] type = LONG_DOUBLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._double());
				}
			},
			Action.NONE,  	// [132] opt$SIGNED = 
			Action.RETURN,	// [133] opt$SIGNED = SIGNED
			new Action() {	// [134] type = opt$SIGNED CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._char());
				}
			},
			Action.NONE,  	// [135] opt$INT = 
			Action.RETURN,	// [136] opt$INT = INT
			new Action() {	// [137] type = opt$SIGNED SHORT opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._short());
				}
			},
			new Action() {	// [138] type = opt$SIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._int());
				}
			},
			new Action() {	// [139] type = opt$SIGNED LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._long());
				}
			},
			new Action() {	// [140] type = opt$SIGNED LONG_LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._long_long());
				}
			},
			new Action() {	// [141] type = UNSIGNED CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._char());
				}
			},
			new Action() {	// [142] type = UNSIGNED SHORT opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._short());
				}
			},
			new Action() {	// [143] type = UNSIGNED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._int());
				}
			},
			new Action() {	// [144] type = UNSIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._int());
				}
			},
			new Action() {	// [145] type = UNSIGNED LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long());
				}
			},
			new Action() {	// [146] type = LONG_UNSIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long());
				}
			},
			new Action() {	// [147] type = UNSIGNED LONG_LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long_long());
				}
			},
			new Action() {	// [148] type = TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					 return s(new TypedefName(t));
				}
			},
			new Action() {	// [149] type = STRUCT ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new StructName(t));
				}
			},
			new Action() {	// [150] type = UNION ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new UnionName(t));
				}
			},
			new Action() {	// [151] type = ENUM ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new EnumName(t));
				}
			},
			new Action() {	// [152] type = STRUCT LBRACE fields.fs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new AnonStruct(Parsing.members(fs)));
				}
			},
			new Action() {	// [153] type = UNION LBRACE fields.fs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new AnonUnion(Parsing.members(fs)));
				}
			},
			new Action() {	// [154] type = ENUM LBRACE consts.cs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cs = _symbols[offset + 3];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final Const[] cs = _list_cs == null ? new Const[0] : (Const[]) _list_cs.toArray(new Const[_list_cs.size()]);
					 return s(new AnonEnum(cs));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
