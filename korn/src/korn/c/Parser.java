package korn.c;

import java.util.Set;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short INCR = 1;
		static public final short DECR = 2;
		static public final short STAR = 3;
		static public final short PLUS = 4;
		static public final short MINUS = 5;
		static public final short ID = 6;
		static public final short AMP = 7;
		static public final short LPAREN = 8;
		static public final short CONST = 9;
		static public final short SIZEOF = 10;
		static public final short PREFIX = 11;
		static public final short POSTFIX = 12;
		static public final short BANG = 13;
		static public final short TILDE = 14;
		static public final short LBRACK = 15;
		static public final short ARROW = 16;
		static public final short DOT = 17;
		static public final short SEMICOLON = 18;
		static public final short DIV = 19;
		static public final short MOD = 20;
		static public final short SHL = 21;
		static public final short SHR = 22;
		static public final short STRUCT = 23;
		static public final short LBRACE = 24;
		static public final short UNION = 25;
		static public final short ENUM = 26;
		static public final short UNSIGNED = 27;
		static public final short LONG_UNSIGNED = 28;
		static public final short VOID = 29;
		static public final short BOOL = 30;
		static public final short FLOAT = 31;
		static public final short DOUBLE = 32;
		static public final short LONG_DOUBLE = 33;
		static public final short SIGNED = 34;
		static public final short TYPE = 35;
		static public final short LT = 36;
		static public final short LE = 37;
		static public final short GE = 38;
		static public final short GT = 39;
		static public final short EQ = 40;
		static public final short NEQ = 41;
		static public final short RBRACE = 42;
		static public final short COMMA = 43;
		static public final short RPAREN = 44;
		static public final short CARET = 45;
		static public final short PIPE = 46;
		static public final short AND = 47;
		static public final short ASG = 48;
		static public final short QUESTION = 49;
		static public final short OR = 50;
		static public final short ASG_OP = 51;
		static public final short WHILE = 52;
		static public final short TYPEDEF = 53;
		static public final short DO = 54;
		static public final short FOR = 55;
		static public final short IF = 56;
		static public final short GOTO = 57;
		static public final short CASE = 58;
		static public final short SWITCH = 59;
		static public final short RETURN = 60;
		static public final short BREAK = 61;
		static public final short CONTINUE = 62;
		static public final short INT = 63;
		static public final short COLON = 64;
		static public final short RBRACK = 65;
		static public final short CHAR = 66;
		static public final short SHORT = 67;
		static public final short LONG = 68;
		static public final short LONG_LONG = 69;
		static public final short ELSE = 70;

		static public final String[] NAMES = {
			"EOF",
			"INCR",
			"DECR",
			"STAR",
			"PLUS",
			"MINUS",
			"ID",
			"AMP",
			"LPAREN",
			"CONST",
			"SIZEOF",
			"PREFIX",
			"POSTFIX",
			"BANG",
			"TILDE",
			"LBRACK",
			"ARROW",
			"DOT",
			"SEMICOLON",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"STRUCT",
			"LBRACE",
			"UNION",
			"ENUM",
			"UNSIGNED",
			"LONG_UNSIGNED",
			"VOID",
			"BOOL",
			"FLOAT",
			"DOUBLE",
			"LONG_DOUBLE",
			"SIGNED",
			"TYPE",
			"LT",
			"LE",
			"GE",
			"GT",
			"EQ",
			"NEQ",
			"RBRACE",
			"COMMA",
			"RPAREN",
			"CARET",
			"PIPE",
			"AND",
			"ASG",
			"QUESTION",
			"OR",
			"ASG_OP",
			"WHILE",
			"TYPEDEF",
			"DO",
			"FOR",
			"IF",
			"GOTO",
			"CASE",
			"SWITCH",
			"RETURN",
			"BREAK",
			"CONTINUE",
			"INT",
			"COLON",
			"RBRACK",
			"CHAR",
			"SHORT",
			"LONG",
			"LONG_LONG",
			"ELSE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMdcyJLKRVjQPxhbKbuDSGvC8rqt8K99xIOuC5nck4FeCePcavCjKQPBcDDEeL99e456" +
		"Q9ogLYfHIcZLBjRvdh$sUS$RPv#npZwFFhp$iytltizRxhlK#xxlMscklVG4ghTHhSHMkmQ" +
		"su3ZUe26v7Dmp02JWENJ47DsCUncYjmXY9KHYBKx591V05liFfc8YX68QJy1yCnwCu3vKm7" +
		"IDG6HVYQVgSZtnCHPYQ$s8A#kC9rHXvggbgfUgfoceVjP#geMgfElgjZEnxOnogaFqCd8dn" +
		"c921FUu5nwTuUGGFfMVFo3qNDJ2Bt5TW6Px4nHcu#w4cdZBPNyHyB9oFMio#BgRX7ap9WRi" +
		"xoZ22t2TY4BtjdsFUpsBjpdFhTpcJVSbz6Vk$YO8SkN$APSprrwYarvDx1mvKlL0lH#xVSf" +
		"hlJr5WSUiTg8$DE2JNCLSzSk3UYaLOnBmVn8$u2erov2v2SGxSFv2xARb$HJDiGvySkLkWv" +
		"SvpAv#gXahaRgqwaVM87BdRebqEt6LeZr9oTuJ5tJb7xYxecSEOz#OubvDx80PZD4xEaVjy" +
		"NEp17K4rrC51E1YJqGftEkepK8Zgs9VF#7uu00tGKEf$nEeg7zkvvuGGH6CqmQ4u3CrnkEg" +
		"6gEg3DZWIH#4ObE1e7ElmEfeilHprgkBr51VBOZUBgkfauJuRnTrUBAezMgaZ7IornUje5y" +
		"i3AIpLKrWMP6GvIkgdeGEz6w$g61VBMLOzpd2GwiYMRfOU6LawEt8vsoENSr9oEII5PKX6b" +
		"YuEbdCb5zVisxd56HhX0lrnokoNUix#JCv#WQD#YNWjJ3VxSPP3SIckJCfbDdDPuiMYloBB" +
		"srAlWgjnhNYztiKoEOdbCDo8cv9ORc4k1thcSXj7BDOt3wk9jjSxuYnpyG5cuLwU2$R1VLY" +
		"3lR0A0HM4Fubb2LaQUB8yJ9PZiH2V65s2PM6SPNfSDvcdYJKyJRoXEc0fpr9EbY$9Kkp9yZ" +
		"XP#ZAIxrqiizEm$6ApgEvaMUTYMKwMmrqicVQb5NW6p#lrMCbLyGfUnIIyXiTmVvhTBH7hw" +
		"vpTT$0ktdF5#c6QM3SmrkSu8kzZ8pvonVenFiSMpn6PIvPP#CRCdQMzFEsuVolQ#THFnS$u" +
		"7P#vM9vK9MoNwQbh0us$ZEvl1NaU$Acvg13cgxquxdkhAlWwcKKLg9ggTlRZhkgg$TK1ZjK" +
		"xIHrSqRYh#XoH07nSlTIfXdganDKalkyKgMOo7bQBcFUZLOka4R5RP1zhSynLBNc#RctDXJ" +
		"g2Q#I52cDj6zjdL3kZxI#n7kVQ0MnjBDAkAgfw9erhRtKyuBdFh2CBJ3rsjxqY7GkrbM1TB" +
		"r9UJXgH0gFFl19XLg9rlPJ2CfTbPui$4RkSB72mmB1uS$oPmk5zUN4alCECa$FQLU#v#NRt" +
		"IhSgC$ToHvGTLtQzt3sSlNP#l3BjkkPI#rRSXZlphhRPOzjZssFxTzecyV6zA#sRD75Dqfz" +
		"aqMRJF#JdtzSc$KaZ#NfBAQnFsyuQuVGUSh5mqpRdhm2$k4F8GnZvF5DKvdV5tkQKMWBhBT" +
		"AHPuXEF47Kv5kZ5hzyww0ktnlxyyrn8DykzVX#yQCBrq28RuemYb26xlmYjpHzq9UwOhJas" +
		"x4rtuL7y4tRbc$oTZmhjC#2FPeLUoOlHUHFpvwfLm$gUfAxDzTubDbuS$Tdomucrw7aih2C" +
		"FNfHoapsEyyTDLuYWj4Sy$OUzKozmhGKapja#XVirZ4lZND7QSarxzou8ypLuhP6lN0tZta" +
		"40$cBu4J#SkUEyfSRTzHmMtc7TpDtgVdoYzAs#$EEchoZkpJVriwGo$CTDjnXhfOIbEV87S" +
		"g2kv2zXZhg8xdAgw0gQzLu#g$1yxzTxnwlstjELxxLw$Ehu11#5pJY#NymL$OGVWCqvLT0C" +
		"tvljE0NHy9h2LcA7VKEuhNSnHAgW2LAba9Fblva6P26fUJ$nbBEzLcICaBEt18CWzdIpLAS" +
		"TIxb7hcKPv5BzYonN29fPp$1KCHVzhC$WYm5Zdgf1ql8nPBFTwoJfI3Zl9II9IJrgFdPNgC" +
		"kba8NYzKo#n6BaYNHrq8tYtqkA3BdWWZFlVqmICvJJfR2Z2m3oMAzvUny4Yo9bPlG5V8KSG" +
		"9F4uFeqJfDE5b26LcA34jX2al1JhBuCxAasvUAkQAitQs0RKBStOehtDt2z5B8YDsn5gQ9j" +
		"KXYjKRG7Mk4reXdh3t84fixIzilxRX7H5j6VIzp8d2ps2iayrCtd1PB5pNZOFdhwf6BpLAQ" +
		"mf9ltX7PZtl4l5KIgxScwnMDkxNUxTLhwJfZLCfw3$CTO#liR1BFLVApQxN8FjOmvoB2kGZ" +
		"BSrIJSr5Hh97uFcE$Qve8Qx5h1uXb48iqmdloKrEijMUiN8cqiXw$6t$4D2pK#ZKlX2ZXv1" +
		"4n#emhaNPcRzhrIs7fmN9I2osNaqKqXeLeiUm4X$Qyl3WItgd9S$NPLUyv#NRtIhigC$PoH" +
		"vGTLtQzt3sIUktyU6LuegHbP7UqsMFROzjZ#vVQQlBfJVicTUmdDNdksDF6iusqypgrUevm" +
		"JXQeVbFjl$XQVscjAcLC5G4gJH3TGJQgStXhbx3px0RVrgb9VJ1Jy5RfCmVmrvNokq1W1Vj" +
		"K9suZ7Wy4eyIhsEOouXlKzmV2bLd$WLYBTSOPRaWRsuTRKL#VU0ondDYRk9mu5CYxddWQyM" +
		"7Y#SH9n4k9j8Ll97OYtaFSbxWO27r1NCN#FOblihw4k87n74tycdWcSJlnhaHkGSRldvwe#" +
		"tu7ylEaJ9$OABddKL#3xRUBRIdz5nEljUl#9SunSmgdVwtqcPOyhhxDqhUUS5IHUkz46$ye" +
		"mKi47tVqVy$6$BNKRnBx9wnlTd3$bMYlGhHlvVYtjEk1wWbReBNuujpaDsUU7Ezyhg7WGyG" +
		"UpDLF74JaFEUF8NAkyYSI1n8l8dAkywybpahEqT#C#b$e$opA5GxzSE5zd3Ukby1Ah$6ZxJ" +
		"2kMuv$uBc4BiGv3dnbbuFxK1Xtu6zY0xQTJkMpnDcEzhT9smC4ENV18Wh797WKszvAvQSkt" +
		"bwq7KeRrsomBgK3fPlOc6km3MrDY8mlE80YprxW2OxrEBjSYMils9vIBhRtQNj4RCmXQCb4" +
		"iN6DgkyaliaiA#85Kh#4TMi#fZZcivFr3nxK$PTZF8yvCk$W$VHx4jT6SQ8TQ0zUxvgNByN" +
		"lCieYAQ#cNCZ2Cl6lUPFrdhTEOgmZRPSBlYsuaJ4ifBsC$Tg8RWjrV9O3qwYRmFfAucAPZp" +
		"1jhzBs67NRR9tF6aS#hw73QLjF6v$dK1Dfpx4ErYPoFULPUkuNYdCIQif#fqcR5XBZ0uayV" +
		"Hp$K1VsuNCVuhwXk5v3t7Dy2npZoB7sZKtKG#Cfp2F4Qc13GX#Sv$2xAbRcCxQ5iYbX2tHB" +
		"7claE#lfXDS8HrcUULmcyGK4Gu8T1Ji9JXUyNV0EmTWyhX3yI723u0x1loMdse8onpxP4tm" +
		"odxuZ1TiAjXCSuCfbHgBiwoiutc7lvh1FSFMTwQnN9CvvaxhiYVusoNh$iOxogOBdUldbV6" +
		"v8xezXulyQgKV5n$BaTi763XvPru5giRsMM4Embc1ZmIB1veAbWjtJvut1Nh5pFiT8ts5UR" +
		"SG#8rM74e#sdIK$dzG$PlbxknmwtQFFUHcubthRWdjbZZkODaQnZVEsATTQKVSbrtry5mMF" +
		"OpvJnDSOHxmFidwAezunKuoftBwV4sL$G$5VuLfdcxdIPu13zuJePWckSDXMYowszkexREl" +
		"I#EyZyMdf9tjeS8qZtgM2NHAwq5pMHuf#ZkWQ9FiEDSgSc#h79urxhrwZ9#ktzPkyy$IbVx" +
		"Di#Wtzgy6$zTtwBkATb7b6GsRDqv##WS8JehwEmhUnlePoDOKdJpsRSYLb5kKAokKKdb0qJ" +
		"u#QRr8zatAn2GAQfnTz8MK6PRf#M3zaOdhGYeLudrx0#$sc$85#G2A#btAFdgQdwYdw0itt" +
		"gvwapzCJzRdw7E84ojdwB3sUE4wVoViP59vazUdwLDvFCJv6MxxqfoRdt$KMYMQhtg6$rDl" +
		"r7zhy7qbz1#LsocqKdb7qBPIRAJTHvkY$zEVw2udfPFsPtamS8vu#qXlrABr1dw$7nblCrn" +
		"$I$o#GosWdwn$8lqF$JFafoVAZtgPVZyLhjAzHniPhhnhRAtPTlsXiBqlj1IiI$PAqN6tke" +
		"$Jp9jiT#dlUlnEMv$Ip1j$JxsX#IUZbfktJTXHwcLx0#rCiFqdXoKhpATLBOr7g9V7IOvJ5" +
		"yTgZiIXDVP7DbSXEFwBVbv7$neh8OLcelpMbLNfbNFiCRpTZ58zRFVYjt9FOar$D$5QXAFF" +
		"t$#uiTpV$2g0eVfnW9439no3g1h4#s4WGGrWVml88zXd1yb2s6yhwI9P74ikC1D6BzLxqsP" +
		"Vj#hBSXpAGSg8HF$eJ#nDvzZJ$CjULvU74uSHXn67io#yvy$VuaoZTZ8GebIXX4Rz3GY91H" +
		"zcIF16$#F19EI3eSw1F#WUbJmpp3M#K$Mtnkye1Ib3G4f#8ts7tLI3#VqY2IVKkZD4jV4zG" +
		"hB8F$1QYM6M$gTleB2j7sQsBII0k9$yFakC270==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

    Set<String> types;

    Symbol s(Object x) {
        return new Symbol(x);
    }
    
    Symbol s(Symbol h, Stmt x) {
        int a = h.getStart();
        x.here(h.getLine(a), h.getColumn(a));
        return new Symbol(x);
    }

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = stmts.ss
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 1];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Stmt[] ss = _list_ss == null ? new Stmt[0] : (Stmt[]) _list_ss.toArray(new Stmt[_list_ss.size()]);
					 return s(new Block(ss));
				}
			},
			RETURN2,	// [1] bound = LBRACK expr.e RBRACK
			new Action() {	// [2] lst$bound = bound
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [3] lst$bound = lst$bound bound
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [4] opt$lst$bound = 
			Action.RETURN,	// [5] opt$lst$bound = lst$bound
			Action.RETURN,	// [6] bounds = opt$lst$bound
			new Action() {	// [7] ptrs = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(0);
				}
			},
			new Action() {	// [8] ptrs = ptrs.ps STAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 1];
					final int ps = (int) _symbol_ps.value;
					 return s(ps + 1);
				}
			},
			new Action() {	// [9] dims = bounds.bs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bs = _symbols[offset + 1];
					final ArrayList _list_bs = (ArrayList) _symbol_bs.value;
					final Expr[] bs = _list_bs == null ? new Expr[0] : (Expr[]) _list_bs.toArray(new Expr[_list_bs.size()]);
					 return s(new Dims(false, bs));
				}
			},
			new Action() {	// [10] dims = LBRACK RBRACK bounds.bs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bs = _symbols[offset + 3];
					final ArrayList _list_bs = (ArrayList) _symbol_bs.value;
					final Expr[] bs = _list_bs == null ? new Expr[0] : (Expr[]) _list_bs.toArray(new Expr[_list_bs.size()]);
					 return s(new Dims(true, bs));
				}
			},
			new Action() {	// [11] param = type.t ptrs.x dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new ParamSpec(Parsing.wrap(t, x), ds));
				}
			},
			new Action() {	// [12] param = type.t ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 4];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new ParamSpec(Parsing.wrap(t, x), n, ds));
				}
			},
			new Action() {	// [13] param = type.t ptrs.x LPAREN STAR ID.n RPAREN LPAREN params.ps RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 5];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 8];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 return s(new ParamSpec(new FunPtrType(Parsing.wrap(t, x), Parsing.params(ps)), n));
				}
			},
			new Action() {	// [14] params = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] params = params COMMA param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [16] var = ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new VarSpec(x, n, ds));
				}
			},
			new Action() {	// [17] var = ptrs.x ID.n dims.ds ASG expr.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					final Symbol _symbol_i = _symbols[offset + 5];
					final Expr i = (Expr) _symbol_i.value;
					 return s(new VarSpec(x, n, ds, i));
				}
			},
			new Action() {	// [18] vars = var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [19] vars = vars COMMA var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [20] opt$ID = 
			Action.RETURN,	// [21] opt$ID = ID
			new Action() {	// [22] field = ptrs.x opt$ID.n COLON CONST
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new FieldSpec(x, n));
				}
			},
			new Action() {	// [23] field = ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new FieldSpec(x, n, ds));
				}
			},
			new Action() {	// [24] fields_ = field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [25] fields_ = fields_ COMMA field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [26] fields__ = type.t fields_.fs SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_fs = _symbols[offset + 2];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final FieldSpec[] fs = _list_fs == null ? new FieldSpec[0] : (FieldSpec[]) _list_fs.toArray(new FieldSpec[_list_fs.size()]);
					 return s(new FieldsSpec(t, fs));
				}
			},
			new Action() {	// [27] fields__ = UNION LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new FlatUnionSpec(fs));
				}
			},
			new Action() {	// [28] lst$fields__ = fields__
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [29] lst$fields__ = lst$fields__ fields__
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [30] opt$lst$fields__ = 
			Action.RETURN,	// [31] opt$lst$fields__ = lst$fields__
			Action.RETURN,	// [32] fields = opt$lst$fields__
			Action.RETURN,	// [33] const = ID.n
			new Action() {	// [34] consts = const
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [35] consts = consts COMMA const
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [36] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [37] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [38] exprs_ = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(new Expr[]{});
				}
			},
			new Action() {	// [39] exprs_ = exprs.es
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_es = _symbols[offset + 1];
					final ArrayList _list_es = (ArrayList) _symbol_es.value;
					final Expr[] es = _list_es == null ? new Expr[0] : (Expr[]) _list_es.toArray(new Expr[_list_es.size()]);
					 return s(es);
				}
			},
			new Action() {	// [40] block = LBRACE stmts.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Stmt[] ss = _list_ss == null ? new Stmt[0] : (Stmt[]) _list_ss.toArray(new Stmt[_list_ss.size()]);
					 return s(new Block(ss));
				}
			},
			Action.RETURN,	// [41] fun = ID.n
			RETURN2,	// [42] fun = LPAREN ID.n RPAREN
			new Action() {	// [43] lst$stmt = stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [44] lst$stmt = lst$stmt stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [45] opt$lst$stmt = 
			Action.RETURN,	// [46] opt$lst$stmt = lst$stmt
			Action.RETURN,	// [47] stmts = opt$lst$stmt
			Action.RETURN,	// [48] stmt = block
			new Action() {	// [49] stmt = TYPEDEF type.t ptrs.x ID.n dims.ds SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 5];
					final Dims ds = (Dims) _symbol_ds.value;
					 types.add(n);
                                                           return s(new TypeDef(Parsing.wrap(t.withDims(ds), x), n));
				}
			},
			new Action() {	// [50] stmt = TYPEDEF type.t ptrs.x LPAREN STAR ID.n RPAREN LPAREN params.ps RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 6];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 9];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 types.add(n);
                                                           return s(new TypeDef(new FunPtrType(Parsing.wrap(t, x), Parsing.params(ps)), n));
				}
			},
			new Action() {	// [51] stmt = TYPEDEF STRUCT ID.m LBRACE fields.fs RBRACE ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 3];
					final String m = (String) _symbol_m.value;
					final Symbol _symbol_fs = _symbols[offset + 5];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					final Symbol _symbol_n = _symbols[offset + 7];
					final String n = (String) _symbol_n.value;
					 types.add(n);
                                                           return s(new Group(new StructDef(m, Parsing.members(fs)),
                                                                              new TypeDef(new StructName(m), n)));
				}
			},
			new Action() {	// [52] stmt = TYPEDEF UNION ID.m LBRACE fields.fs RBRACE ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 3];
					final String m = (String) _symbol_m.value;
					final Symbol _symbol_fs = _symbols[offset + 5];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					final Symbol _symbol_n = _symbols[offset + 7];
					final String n = (String) _symbol_n.value;
					 types.add(n);
                                                           return s(new Group(new UnionDef(m, Parsing.members(fs)),
                                                                              new TypeDef(new UnionName(m), n)));
				}
			},
			new Action() {	// [53] stmt = STRUCT ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new StructDecl(n));
				}
			},
			new Action() {	// [54] stmt = UNION ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new UnionDecl(n));
				}
			},
			new Action() {	// [55] stmt = ENUM ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new EnumDecl(n));
				}
			},
			new Action() {	// [56] stmt = STRUCT ID.n LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_fs = _symbols[offset + 4];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new StructDef(n, Parsing.members(fs)));
				}
			},
			new Action() {	// [57] stmt = UNION ID.n LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_fs = _symbols[offset + 4];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new UnionDef(n, Parsing.members(fs)));
				}
			},
			new Action() {	// [58] stmt = ENUM LBRACE consts.cs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cs = _symbols[offset + 3];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final String[] cs = _list_cs == null ? new String[0] : (String[]) _list_cs.toArray(new String[_list_cs.size()]);
					 return s(new EnumDef(cs));
				}
			},
			new Action() {	// [59] stmt = ENUM ID.n LBRACE consts.cs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_cs = _symbols[offset + 4];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final String[] cs = _list_cs == null ? new String[0] : (String[]) _list_cs.toArray(new String[_list_cs.size()]);
					 return s(new EnumDef(n, cs));
				}
			},
			new Action() {	// [60] stmt = type.t ptrs.x fun.n LPAREN RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					 return s(_symbol_n, new FunDecl(Parsing.wrap(t, x), n));
				}
			},
			new Action() {	// [61] stmt = type.t ptrs.x fun.n LPAREN RPAREN block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Block b = (Block) _symbol_b.value;
					 return s(_symbol_n, new FunDef(Parsing.wrap(t, x), n, b));
				}
			},
			new Action() {	// [62] stmt = type.t ptrs.x fun.n LPAREN params.ps RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 return s(_symbol_n, new FunDecl(Parsing.wrap(t, x), n, Parsing.params(ps)));
				}
			},
			new Action() {	// [63] stmt = type.t ptrs.x fun.n LPAREN params.ps RPAREN block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 7];
					final Block b = (Block) _symbol_b.value;
					 return s(_symbol_n, new FunDef(Parsing.wrap(t, x), n, Parsing.formals(ps), b));
				}
			},
			new Action() {	// [64] stmt = type.t vars.vs SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_vs = _symbols[offset + 2];
					final ArrayList _list_vs = (ArrayList) _symbol_vs.value;
					final VarSpec[] vs = _list_vs == null ? new VarSpec[0] : (VarSpec[]) _list_vs.toArray(new VarSpec[_list_vs.size()]);
					 return s(new Group(Parsing.vars(t, vs)));
				}
			},
			new Action() {	// [65] stmt = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Atomic.none());
				}
			},
			new Action() {	// [66] stmt = expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Atomic(a));
				}
			},
			new Action() {	// [67] stmt = GOTO ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new Goto(n));
				}
			},
			new Action() {	// [68] stmt = CASE CONST.n COLON stmt.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Object n = (Object) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s(new Case(n, s));
				}
			},
			new Action() {	// [69] stmt = ID.n COLON stmt.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s(new Label(n, s));
				}
			},
			new Action() {	// [70] stmt = RETURN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Return.none());
				}
			},
			new Action() {	// [71] stmt = RETURN expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Return(a));
				}
			},
			new Action() {	// [72] stmt = BREAK SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Break.self());
				}
			},
			new Action() {	// [73] stmt = CONTINUE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Continue.self());
				}
			},
			new Action() {	// [74] stmt = SWITCH LPAREN expr.e RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(new Switch(e, b));
				}
			},
			new Action() {	// [75] stmt = IF LPAREN expr.a RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(new If(a, b));
				}
			},
			new Action() {	// [76] stmt = IF LPAREN expr.a RPAREN stmt.b ELSE stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Stmt c = (Stmt) _symbol_c.value;
					 return s(new If(a, b, c));
				}
			},
			new Action() {	// [77] stmt = WHILE.w LPAREN expr.a RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(w, new While(a, b));
				}
			},
			new Action() {	// [78] stmt = DO.w stmt.b WHILE LPAREN expr.a RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Expr a = (Expr) _symbol_a.value;
					 return s(w, new DoWhile(b, a));
				}
			},
			new Action() {	// [79] stmt = FOR.w LPAREN exprs_.a SEMICOLON exprs_.b SEMICOLON exprs_.c RPAREN stmt.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr[] a = (Expr[]) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Expr[] b = (Expr[]) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Expr[] c = (Expr[]) _symbol_c.value;
					final Symbol _symbol_p = _symbols[offset + 9];
					final Stmt p = (Stmt) _symbol_p.value;
					 return s(w, new For(a, b, c, p));
				}
			},
			new Action() {	// [80] stmt = FOR.w LPAREN type.t vars.vs SEMICOLON exprs_.b SEMICOLON exprs_.c RPAREN stmt.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_vs = _symbols[offset + 4];
					final ArrayList _list_vs = (ArrayList) _symbol_vs.value;
					final VarSpec[] vs = _list_vs == null ? new VarSpec[0] : (VarSpec[]) _list_vs.toArray(new VarSpec[_list_vs.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Expr[] b = (Expr[]) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 8];
					final Expr[] c = (Expr[]) _symbol_c.value;
					final Symbol _symbol_p = _symbols[offset + 10];
					final Stmt p = (Stmt) _symbol_p.value;
					 return s(w, new For(Parsing.vars(t, vs), b, c, p));
				}
			},
			Action.RETURN,	// [81] expr = PREFIX
			Action.RETURN,	// [82] expr = POSTFIX
			RETURN2,	// [83] expr = LPAREN expr.e RPAREN
			new Action() {	// [84] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(new Id(n));
				}
			},
			new Action() {	// [85] expr = CONST.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Object n = (Object) _symbol_n.value;
					 return s(new Lit(n));
				}
			},
			new Action() {	// [86] expr = ID.n LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(new FunCall(n));
				}
			},
			new Action() {	// [87] expr = ID.n LPAREN exprs.as RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_as = _symbols[offset + 3];
					final ArrayList _list_as = (ArrayList) _symbol_as.value;
					final Expr[] as = _list_as == null ? new Expr[0] : (Expr[]) _list_as.toArray(new Expr[_list_as.size()]);
					 return s(new FunCall(n, as));
				}
			},
			new Action() {	// [88] expr = LPAREN type.t ptrs.x RPAREN expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Cast(Parsing.wrap(t, x), a));
				}
			},
			new Action() {	// [89] expr = SIZEOF LPAREN type.t RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					 return s(new SizeOfType(t));
				}
			},
			new Action() {	// [90] expr = SIZEOF LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					 return s(new SizeOfExpr(e));
				}
			},
			new Action() {	// [91] expr = expr.a INCR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PostOp("++", a));
				}
			},
			new Action() {	// [92] expr = expr.a DECR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PostOp("--", a));
				}
			},
			new Action() {	// [93] expr = expr.a ARROW ID.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					 return s(new Arrow(a, f));
				}
			},
			new Action() {	// [94] expr = expr.a DOT ID.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					 return s(new Dot(a, f));
				}
			},
			new Action() {	// [95] expr = expr.a LBRACK expr.i RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expr i = (Expr) _symbol_i.value;
					 return s(new Index(a, i));
				}
			},
			new Action() {	// [96] expr = INCR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("++", a));
				}
			},
			new Action() {	// [97] expr = DECR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("--", a));
				}
			},
			new Action() {	// [98] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("+", a));
				}
			},
			new Action() {	// [99] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("-", a));
				}
			},
			new Action() {	// [100] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("!", a));
				}
			},
			new Action() {	// [101] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("~", a));
				}
			},
			new Action() {	// [102] expr = STAR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("*", a));
				}
			},
			new Action() {	// [103] expr = AMP expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("&", a));
				}
			},
			new Action() {	// [104] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("*", a, b));
				}
			},
			new Action() {	// [105] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("/", a, b));
				}
			},
			new Action() {	// [106] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("%", a, b));
				}
			},
			new Action() {	// [107] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("+", a, b));
				}
			},
			new Action() {	// [108] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("-", a, b));
				}
			},
			new Action() {	// [109] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<<",a, b));
				}
			},
			new Action() {	// [110] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">>",a, b));
				}
			},
			new Action() {	// [111] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<", a, b));
				}
			},
			new Action() {	// [112] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<=",a, b));
				}
			},
			new Action() {	// [113] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">=",a, b));
				}
			},
			new Action() {	// [114] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">", a, b));
				}
			},
			new Action() {	// [115] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("==",a, b));
				}
			},
			new Action() {	// [116] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("!=",a, b));
				}
			},
			new Action() {	// [117] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("&", a, b));
				}
			},
			new Action() {	// [118] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("^", a, b));
				}
			},
			new Action() {	// [119] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("|", a, b));
				}
			},
			new Action() {	// [120] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("&&",a, b));
				}
			},
			new Action() {	// [121] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("||",a, b));
				}
			},
			new Action() {	// [122] expr = expr.a QUESTION expr.b COLON expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Expr c = (Expr) _symbol_c.value;
					 return s(new Question(a, b, c));
				}
			},
			new Action() {	// [123] expr = expr.a ASG expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("=", a, b));
				}
			},
			new Action() {	// [124] expr = expr.a ASG_OP.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final String e = (String) _symbol_e.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("=", a, new BinOp(e.substring(0, e.length() - 1), a, b)));
				}
			},
			new Action() {	// [125] expr = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(",", a, b));
				}
			},
			new Action() {	// [126] type = VOID
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._void());
				}
			},
			new Action() {	// [127] type = BOOL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._Bool());
				}
			},
			new Action() {	// [128] type = FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._float());
				}
			},
			new Action() {	// [129] type = DOUBLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._double());
				}
			},
			new Action() {	// [130] type = LONG_DOUBLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._double());
				}
			},
			Action.NONE,  	// [131] opt$SIGNED = 
			Action.RETURN,	// [132] opt$SIGNED = SIGNED
			new Action() {	// [133] type = opt$SIGNED CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._char());
				}
			},
			Action.NONE,  	// [134] opt$INT = 
			Action.RETURN,	// [135] opt$INT = INT
			new Action() {	// [136] type = opt$SIGNED SHORT opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._short());
				}
			},
			new Action() {	// [137] type = opt$SIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._int());
				}
			},
			new Action() {	// [138] type = opt$SIGNED LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._long());
				}
			},
			new Action() {	// [139] type = opt$SIGNED LONG_LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._long_long());
				}
			},
			new Action() {	// [140] type = UNSIGNED CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._char());
				}
			},
			new Action() {	// [141] type = UNSIGNED SHORT opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._short());
				}
			},
			new Action() {	// [142] type = UNSIGNED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._int());
				}
			},
			new Action() {	// [143] type = UNSIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._int());
				}
			},
			new Action() {	// [144] type = UNSIGNED LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long());
				}
			},
			new Action() {	// [145] type = LONG_UNSIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long());
				}
			},
			new Action() {	// [146] type = UNSIGNED LONG_LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long_long());
				}
			},
			new Action() {	// [147] type = TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					 return s(new TypedefName(t));
				}
			},
			new Action() {	// [148] type = STRUCT ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new StructName(t));
				}
			},
			new Action() {	// [149] type = UNION ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new UnionName(t));
				}
			},
			new Action() {	// [150] type = ENUM ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new EnumName(t));
				}
			},
			new Action() {	// [151] type = STRUCT LBRACE fields.fs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new AnonStruct(Parsing.members(fs)));
				}
			},
			new Action() {	// [152] type = UNION LBRACE fields.fs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new AnonUnion(Parsing.members(fs)));
				}
			},
			new Action() {	// [153] type = ENUM LBRACE consts.cs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cs = _symbols[offset + 3];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final String[] cs = _list_cs == null ? new String[0] : (String[]) _list_cs.toArray(new String[_list_cs.size()]);
					 return s(new AnonEnum(cs));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
