package korn.c;

import java.util.Set;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short INCR = 1;
		static public final short DECR = 2;
		static public final short STAR = 3;
		static public final short PLUS = 4;
		static public final short MINUS = 5;
		static public final short ID = 6;
		static public final short AMP = 7;
		static public final short LPAREN = 8;
		static public final short CONST = 9;
		static public final short SIZEOF = 10;
		static public final short PREFIX = 11;
		static public final short POSTFIX = 12;
		static public final short BANG = 13;
		static public final short TILDE = 14;
		static public final short LBRACK = 15;
		static public final short ARROW = 16;
		static public final short DOT = 17;
		static public final short SEMICOLON = 18;
		static public final short DIV = 19;
		static public final short MOD = 20;
		static public final short LBRACE = 21;
		static public final short SHL = 22;
		static public final short SHR = 23;
		static public final short STRUCT = 24;
		static public final short UNION = 25;
		static public final short ENUM = 26;
		static public final short UNSIGNED = 27;
		static public final short LONG_UNSIGNED = 28;
		static public final short VOID = 29;
		static public final short BOOL = 30;
		static public final short FLOAT = 31;
		static public final short DOUBLE = 32;
		static public final short LONG_DOUBLE = 33;
		static public final short SIGNED = 34;
		static public final short TYPE = 35;
		static public final short LT = 36;
		static public final short LE = 37;
		static public final short GE = 38;
		static public final short GT = 39;
		static public final short RBRACE = 40;
		static public final short COMMA = 41;
		static public final short EQ = 42;
		static public final short NEQ = 43;
		static public final short RPAREN = 44;
		static public final short CARET = 45;
		static public final short PIPE = 46;
		static public final short AND = 47;
		static public final short ASG = 48;
		static public final short QUESTION = 49;
		static public final short OR = 50;
		static public final short ASG_OP = 51;
		static public final short WHILE = 52;
		static public final short TYPEDEF = 53;
		static public final short DO = 54;
		static public final short FOR = 55;
		static public final short IF = 56;
		static public final short GOTO = 57;
		static public final short CASE = 58;
		static public final short SWITCH = 59;
		static public final short RETURN = 60;
		static public final short BREAK = 61;
		static public final short CONTINUE = 62;
		static public final short INT = 63;
		static public final short COLON = 64;
		static public final short RBRACK = 65;
		static public final short CHAR = 66;
		static public final short SHORT = 67;
		static public final short LONG = 68;
		static public final short LONG_LONG = 69;
		static public final short ELSE = 70;

		static public final String[] NAMES = {
			"EOF",
			"INCR",
			"DECR",
			"STAR",
			"PLUS",
			"MINUS",
			"ID",
			"AMP",
			"LPAREN",
			"CONST",
			"SIZEOF",
			"PREFIX",
			"POSTFIX",
			"BANG",
			"TILDE",
			"LBRACK",
			"ARROW",
			"DOT",
			"SEMICOLON",
			"DIV",
			"MOD",
			"LBRACE",
			"SHL",
			"SHR",
			"STRUCT",
			"UNION",
			"ENUM",
			"UNSIGNED",
			"LONG_UNSIGNED",
			"VOID",
			"BOOL",
			"FLOAT",
			"DOUBLE",
			"LONG_DOUBLE",
			"SIGNED",
			"TYPE",
			"LT",
			"LE",
			"GE",
			"GT",
			"RBRACE",
			"COMMA",
			"EQ",
			"NEQ",
			"RPAREN",
			"CARET",
			"PIPE",
			"AND",
			"ASG",
			"QUESTION",
			"OR",
			"ASG_OP",
			"WHILE",
			"TYPEDEF",
			"DO",
			"FOR",
			"IF",
			"GOTO",
			"CASE",
			"SWITCH",
			"RETURN",
			"BREAK",
			"CONTINUE",
			"INT",
			"COLON",
			"RBRACK",
			"CHAR",
			"SHORT",
			"LONG",
			"LONG_LONG",
			"ELSE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMdcSZTKRVyxTviw46LCZf9GbHhUaGeK6oRNDMCACDVkIL8hAFhPKIlkYbP8I8HMXJL7" +
		"QKsbF4gNTKY9qVjzptkU#zzpttdVkkCclFxppUTxlESzvplDzpdxUcI7AE23VfrlfTdg0xg" +
		"IxHGLwYDfHD#fERQWjpQBxA9$Qqq1HXZBm3jBHT0nzGzleDxgChg4#r9VwKNyQG4$J6Af4E" +
		"NIibF9zKPR#ee4K83#bKM$gYVHJj4YSIkdY376EE5baYcnnagWaZXTLvVeIsOCqXyg0VIRD" +
		"0FjDzBmhk#s5BeppyhiRUudSHyaV5RTybyg2#mNQvyez1IrS9ThBzQ8GySud5Uyace1uCwc" +
		"OogN0hJnceTtbvJvmJwQEARLxJohjbXkeaBg0UmKj1NSMFPaAj$1GOGhjha2loa$1$G6z2k" +
		"wAz7vAxQvCnwV0NPNAQExFCEf1EeasfSHTdMgcm5sBljNpV0lj5q7HcN9JuZw5Jas1koxzI" +
		"3l0$HFjHBlhqPafSTUdXYbmdqDBCSlAq2xw4zoDg7DAt4qeBmNkPY8WZXLgh9MSBrgbn7q1" +
		"XLFWRetvtGdS7J7QGUf0dLBYNeizEJ6tsgUhK3MgGUkf0Rr2AmsDtgT5Spg1JeJ#PAhDcYP" +
		"QqrLhEjF3L4HrA4IdqUdKWrhH6NGMZQEpwLngJ2seAPr7BGsVqy0otcRfHTanBDCDbZobYP" +
		"mG8WSdH8JbMcPvnfLbA5WUjLc6q74cYsXjiBI9OQbei4otMCG5hYmNW#KH6aI3QHWDf#Oqr" +
		"V89TjMMInIBxRacfTdfEWRBK6vBWIlBfM39AjMujDDj4LepbAw0H5X6CSj5RYpo1x0CfQlZ" +
		"MCffbebH5XgjD7AZrbmdYkXwc#K6PbdWneA#R40BwPOubYgQvMQ3fRpMtAOrTz1TT8$DSc$" +
		"IqRyVBCleGISBpTO#7pDObiICViWObyTvz6kuiYm6on9wBexb5itoei7oKWnBFOFbPMR9TM" +
		"LPJGticcUYvcliCqkpl1KpnvePSwp0O7cRMKvtPNa7RTb0xshD9$fjZKjOitngjCLwRvJlq" +
		"9VqjMWftxPPlcUMXWwMalQbx#XA#aL#IfVJ21f9Lz6lD9QUfISIx6xHMF$G$Rv4xMcqLx#j" +
		"cEReM6VgMDLzQWxTY3rj9hr7QrHUUEbrEzQ$qJ8rXwJhJ6sFVcyXV4eZqemUoT1ZcUNi4N6" +
		"qA2#E4SU94yI94HPHJLJNB1#vijHIkw6ehLbECLXEqonrurZE4lL50t6sE5SqjbdE4qqrIs" +
		"7f#rsqnPqnCbEEmgp9JzxluaB4wYCFUNMqNMH$ZgchtWy#qh4IHrk6la1w7UHDKa#atxEGL" +
		"h4kEuWvWiUC5TdaSuHKh2BTYjMO8wJd2CN4IhGPiXui7M9Y9OvrlEkgKIpgKHgAZbuCYxbg" +
		"pCV9yaE9BCliUjljkEFd#nkq6tdrg3pHWJWMOXRIBCwMh1JdewUinpnZ8lqr1ttKoC4Gtv8" +
		"8Htm$HPz4ev7uIUpzt$ETU7JD$Jr#TEEvuZqxDIOF7HAUM4sI5HLv12Mt59MJss0F$wSsHy" +
		"gEb1qf#s#MZQMv2KzSVkIcf1PV7m8V$oMBn3SGnoFyz25zdj3IpSF1wjNl$wROf$PyBPDe7" +
		"cGv5IDNx6BnCUIh4YssGdvc2tLGg9kVZ$mKm1qiIEcKGKVXdbUMob4OD$$M#99NxnnjMH4d" +
		"LcLyTLUXut5cLSMfTH9EjkguCsJXouvmVbbrrFngn#dQb8jpiJvENVK5SGvE#KQuHJJ1FQL" +
		"azcnyEtlnxeYo7EfCNLpPI$BYpbvIhNpSenHtjkOE8k$6hLhOZ7g1voB4snwrEb8dh3GLRr" +
		"VStG#UMtdC17COaWEFeSFOxY1gXS0ReXxWpgJUXv4xO7FdWZkGOhl3#3buxZ1AGdgqlU0E0" +
		"mydTxQUQpayryA7cJjRS#VeTXzUxXxuoSOSwwsvWuUvtKrrk$yVuvsh#poa#pm$nJvNkqGo" +
		"xkwerHF#enfhd#wWlqd2L07V7fQcczPqq9gWtdjgK4ryZzJIEq8TEWKHd8hlZxhu0gc7xvm" +
		"p3P#vOCcnMKBO3KsM$3WMyuI8iFH9of8NmrBaOCak5Ki#i#IMoDA7cjFv#5w$03Da4FlCqp" +
		"wBD4ly2HVBaiSi8LUM8h1a7lIuvA5UdirIb9IbALXK7ITBjlPPss39CpG3zSg8iAINSlGpN" +
		"LWA39QmqRgm$ecmX9EoX6D6FyeIZcjBm7NqivFsM0#m1E3DoPAfVNfBnH9AoX84YrapFm5B" +
		"iZaMICeIqZqMr1ghHHPBVjogjDwrzMwOh$zoK$eUItJsvsbVaJMKNOhTBLltUy2uRLen5UX" +
		"OE#fOrNsg0FUfxiZtn5lb1o0VYVLqnAvY3Rl6sWii5t6Fj35wHF#M5kpE7adNAy4w8QExOJ" +
		"Z9J0qQCxMbmHACMzlM#opjCrllkj5#3oNPfnBTbZDZPaffRazjuCNwvb2w00tcc48wrg2AL" +
		"KhMUIc0j9AWn6F7cecqYZMdzB7g#aQio2MD5JPchFOSWHwnuct4od5sX$GqOzNf4cDLBDeA" +
		"6kiTpsAEdZIUE1RNEQBRacFN2zXzd6Y#vr17ROKyteLE5hmr2r2nE5fYzJBp66UCtLy5a6w" +
		"n3F4jYN34zvFH#WIZaVXnyVxl#KuukkR#7Z#wyLm9F3l7s#3XEl#G9rQJR4NPzZd9BR5R70" +
		"QR8sL7oewK$KVBN4vSUnUfVSJ2jB0jtUzLXqglxZRHKxkz4lqRHILTaUjwI2n8T2ksVY#S1" +
		"wd5QVlNmdWQMvWncVCp65#0JE1qFoBF3yKnzKHJnZ3ZFKJUAfp#6AySr3c6oBSTs0cu2tWB" +
		"R6e2tmKM4GLFXBuGU1hm1c1ZbEq4ja7vYq3OU7S01w6y1d0aKTgZmCd0HK3uIni3V10u0hW" +
		"Gs0Au4bW1k8uey3qGyNZR0xSW$omG7FucX8K2l1nO3lX8j6r#PJ$PwADviE6sUJruRMJz9k" +
		"Zhm7ulby5X88Gs7E3yisQVnVQVjpLZ1OU#2#Cm2tq$SVvkmsOMurECQuooJ0lJjoAzWNKRa" +
		"TyTjV7iDTgMZ$Atm9F6jekYPRuSzdKsf2NQEHhO6JWEY3dXHt#de$$yYu4Jq7Oly4PWD#2z" +
		"m1d0nu4p7MriZlcM1l#D80CCldAC$V7A04vnxpzVCvXK1FQBwW8OOzzKBhyTSXTaF6GfR6T" +
		"YNfu0lDUmpsRRvOolGJ3sljMGRR35k8jgiRn#vVDpbEK2tx9q0lFHzplyPG4njpBE1Nx5PT" +
		"SYlGTbcCE2nokZBVm8w7cU1D17uZSkwuaozAE$AfSzZxBjpAtMS6jWFSutnMiji64qFh5Q$" +
		"rS0#UjZ3Mn0VSIMlWmwBzV1EiaOZZamB5g7q4V#xeunsiRs4o7ZEJqDelxBPfMLzwY$xV3S" +
		"J$kH#$0ujYrcdCI8jPg#1kK5YAKXw#P0zm5qaw0RXVnGuDDSzYJADg7i6UXsC5zTw6#2O7s" +
		"d$ueoh6t$KhR7VkMl385zsdxW2jIh0foDUiFPPXwthLEqdHxCM$yds1FK7l0XwdG7eWyz2m" +
		"oRso1FHFC1vUjh81BUFL6zVtOaZUruizcVhCCwepoZtxiPwUbEUwUOSn7fwenD65imzc7io" +
		"pYMSGhZWumFCQvWV9bnDUENZ95v$2VZtnPwAZFoU7lgC$9vuYbYvFF7SwNP5lJ5kcXRF2CP" +
		"nngwvKPwhQFkDZEVJ316FaS#Zx6$Gp$HI4zZdENkDpf#dESpr5k7uzx2#RcnTdvXy6nc$0s" +
		"oazD$CEvcvBxtxhVGLvOnYx5IulWo9YVISwoyRdmXDnlsCJL1NP7OrdCdjy$3ljMQJhVIWT" +
		"69w$Xa2TotiytY16NCvLlbKdTk2NxdkPU9BOxyLaVRm#3SX$P4zhLg5dgdnDe5SFVndn7D#" +
		"tURvSa4VRahclQUp3xQ9A$dxyHrBZHq0rd7Qz5NqoWRmJfUhxvHHjcuUF#1#HpV0aQ#2$cc" +
		"6VKgiMwXKGzdiBSynt4rbyzmnEvwNxBA1UuL4lSz#PuS8pzGkwby4ocShl9FLIvtw$VVyc6" +
		"9aqNEXZoaDRWVoZiXTq1mBv3Op#Mj49n9ycO8xWOIvuh4tKNYpY9n5vNNGww3J8VW39Su##" +
		"HK7GR9AH2SgnBdbYoM2#K27TKJAXBWet8#te$fz6VoSOvvBkGHEL5EaEFbE3aMkMlarNAKl" +
		"4gE15u9kK9U9aS0BvUNuZqSCWnMbyYByHwgVGnIlkGtkiLxv5QEPflS9x#NU#LVSh$EFm2v" +
		"7t8V1BSmEGk2sxcy6tANF22toEyufe7oMxaPE9WzVI6$aWFabtAq769Rp9EVm$yVn8$MZf7" +
		"RmRzF$WxP5LEoK#wGRzZnxk6I8J6veNATrFzh8zVgijSvjqP58bzZgrVqUu1yLRTsdyJ#A7" +
		"$Lkb#OQxLyMUF7yaE9Mv9SfKjNMh785N8#tiyXlHo26v34pLy#4ubLFcsdbaAUidDBfF5$G" +
		"7AnnHLjermaF#7#$qd5PPGyAN$MgPVaYxPMVKNTJuDn9IlG$pCY81x27HeYg0i4zs#8XmgH" +
		"BeHDToq#I3hrXAudyhsqHFws8I1U$Vy#0v7k0zi#o0z2UX2mlHO$lW45nAE#0I42NuI2Ua1" +
		"wQ$5I1s078DOKH50Rf0S01m3x0lkYhhg7gz$4zuEqWyzs5DJI5lcsA6#BMtfRs4SbmE8tqa" +
		"hIMBn6NPNsCNeCz71zFzU9OBhcKtzpiSJhIFiWVaOb7XQlKUv98jv39FwOV2l4w1JSuo4gx" +
		"I5yv#g$uBRIjXv6CosCj5CN4PyjG$u77q5Ylm==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

    Set<String> types;

    Symbol s(Object x) {
        return new Symbol(x);
    }
    
    Symbol s(Symbol h, Stmt x) {
        int a = h.getStart();
        x.here(h.getLine(a), h.getColumn(a));
        return new Symbol(x);
    }

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = stmts.ss
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 1];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Stmt[] ss = _list_ss == null ? new Stmt[0] : (Stmt[]) _list_ss.toArray(new Stmt[_list_ss.size()]);
					 return s(new Block(ss));
				}
			},
			RETURN2,	// [1] bound = LBRACK expr.e RBRACK
			new Action() {	// [2] lst$bound = bound
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [3] lst$bound = lst$bound bound
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [4] opt$lst$bound = 
			Action.RETURN,	// [5] opt$lst$bound = lst$bound
			Action.RETURN,	// [6] bounds = opt$lst$bound
			new Action() {	// [7] ptrs = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(0);
				}
			},
			new Action() {	// [8] ptrs = ptrs.ps STAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 1];
					final int ps = (int) _symbol_ps.value;
					 return s(ps + 1);
				}
			},
			new Action() {	// [9] dims = bounds.bs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bs = _symbols[offset + 1];
					final ArrayList _list_bs = (ArrayList) _symbol_bs.value;
					final Expr[] bs = _list_bs == null ? new Expr[0] : (Expr[]) _list_bs.toArray(new Expr[_list_bs.size()]);
					 return s(new Dims(false, bs));
				}
			},
			new Action() {	// [10] dims = LBRACK RBRACK bounds.bs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bs = _symbols[offset + 3];
					final ArrayList _list_bs = (ArrayList) _symbol_bs.value;
					final Expr[] bs = _list_bs == null ? new Expr[0] : (Expr[]) _list_bs.toArray(new Expr[_list_bs.size()]);
					 return s(new Dims(true, bs));
				}
			},
			new Action() {	// [11] param = type.t ptrs.x dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new ParamSpec(Parsing.wrap(t, x), ds));
				}
			},
			new Action() {	// [12] param = type.t ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 4];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new ParamSpec(Parsing.wrap(t, x), n, ds));
				}
			},
			new Action() {	// [13] param = type.t ptrs.x LPAREN STAR ID.n RPAREN LPAREN params.ps RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 5];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 8];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 return s(new ParamSpec(new FunPtrType(Parsing.wrap(t, x), Parsing.params(ps)), n));
				}
			},
			new Action() {	// [14] params = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] params = params COMMA param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [16] var = ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new VarSpec(x, n, ds));
				}
			},
			new Action() {	// [17] var = ptrs.x ID.n dims.ds ASG expr.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					final Symbol _symbol_i = _symbols[offset + 5];
					final Expr i = (Expr) _symbol_i.value;
					 return s(new VarSpec(x, n, ds, i));
				}
			},
			new Action() {	// [18] var = ptrs.x ID.n dims.ds ASG LBRACE exprs.es RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					final Symbol _symbol_es = _symbols[offset + 6];
					final ArrayList _list_es = (ArrayList) _symbol_es.value;
					final Expr[] es = _list_es == null ? new Expr[0] : (Expr[]) _list_es.toArray(new Expr[_list_es.size()]);
					 return s(new VarSpec(x, n, ds, es));
				}
			},
			new Action() {	// [19] vars = var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [20] vars = vars COMMA var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [21] opt$ID = 
			Action.RETURN,	// [22] opt$ID = ID
			new Action() {	// [23] field = ptrs.x opt$ID.n COLON CONST
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new FieldSpec(x, n));
				}
			},
			new Action() {	// [24] field = ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_x = _symbols[offset + 1];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 3];
					final Dims ds = (Dims) _symbol_ds.value;
					 return s(new FieldSpec(x, n, ds));
				}
			},
			new Action() {	// [25] fields_ = field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [26] fields_ = fields_ COMMA field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [27] fields__ = type.t fields_.fs SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_fs = _symbols[offset + 2];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final FieldSpec[] fs = _list_fs == null ? new FieldSpec[0] : (FieldSpec[]) _list_fs.toArray(new FieldSpec[_list_fs.size()]);
					 return s(new FieldsSpec(t, fs));
				}
			},
			new Action() {	// [28] fields__ = UNION LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new FlatUnionSpec(fs));
				}
			},
			new Action() {	// [29] lst$fields__ = fields__
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [30] lst$fields__ = lst$fields__ fields__
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [31] opt$lst$fields__ = 
			Action.RETURN,	// [32] opt$lst$fields__ = lst$fields__
			Action.RETURN,	// [33] fields = opt$lst$fields__
			Action.RETURN,	// [34] const = ID.n
			new Action() {	// [35] consts = const
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [36] consts = consts COMMA const
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [37] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [38] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [39] exprs_ = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(new Expr[]{});
				}
			},
			new Action() {	// [40] exprs_ = exprs.es
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_es = _symbols[offset + 1];
					final ArrayList _list_es = (ArrayList) _symbol_es.value;
					final Expr[] es = _list_es == null ? new Expr[0] : (Expr[]) _list_es.toArray(new Expr[_list_es.size()]);
					 return s(es);
				}
			},
			new Action() {	// [41] block = LBRACE stmts.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Stmt[] ss = _list_ss == null ? new Stmt[0] : (Stmt[]) _list_ss.toArray(new Stmt[_list_ss.size()]);
					 return s(new Block(ss));
				}
			},
			Action.RETURN,	// [42] fun = ID.n
			RETURN2,	// [43] fun = LPAREN ID.n RPAREN
			new Action() {	// [44] lst$stmt = stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [45] lst$stmt = lst$stmt stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [46] opt$lst$stmt = 
			Action.RETURN,	// [47] opt$lst$stmt = lst$stmt
			Action.RETURN,	// [48] stmts = opt$lst$stmt
			new Action() {	// [49] stmt_typedef = TYPEDEF type.t ptrs.x ID.n dims.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ds = _symbols[offset + 5];
					final Dims ds = (Dims) _symbol_ds.value;
					 types.add(n);
           return s(new TypeDef(Parsing.wrap(t.withDims(ds), x), n));
				}
			},
			new Action() {	// [50] stmt_typedef = TYPEDEF STRUCT ID.m LBRACE fields.fs RBRACE ptrs.x ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 3];
					final String m = (String) _symbol_m.value;
					final Symbol _symbol_fs = _symbols[offset + 5];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					final Symbol _symbol_x = _symbols[offset + 7];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 8];
					final String n = (String) _symbol_n.value;
					 types.add(n);
           return s(new Group(new StructDef(m, Parsing.members(fs)),
                              new TypeDef(Parsing.wrap(new StructName(m), x), n)));
				}
			},
			new Action() {	// [51] stmt_typedef = TYPEDEF UNION ID.m LBRACE fields.fs RBRACE ptrs.x ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 3];
					final String m = (String) _symbol_m.value;
					final Symbol _symbol_fs = _symbols[offset + 5];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					final Symbol _symbol_x = _symbols[offset + 7];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 8];
					final String n = (String) _symbol_n.value;
					 types.add(n);
           return s(new Group(new UnionDef(m, Parsing.members(fs)),
                              new TypeDef(Parsing.wrap(new UnionName(m), x), n)));
				}
			},
			Action.RETURN,	// [52] stmt = block
			Action.RETURN,	// [53] stmt = stmt_typedef.s SEMICOLON
			new Action() {	// [54] stmt = TYPEDEF type.t ptrs.x LPAREN STAR ID.n RPAREN LPAREN params.ps RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 6];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 9];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 types.add(n);
                                                           return s(new TypeDef(new FunPtrType(Parsing.wrap(t, x), Parsing.params(ps)), n));
				}
			},
			new Action() {	// [55] stmt = STRUCT ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new StructDecl(n));
				}
			},
			new Action() {	// [56] stmt = UNION ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new UnionDecl(n));
				}
			},
			new Action() {	// [57] stmt = ENUM ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new EnumDecl(n));
				}
			},
			new Action() {	// [58] stmt = STRUCT ID.n LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_fs = _symbols[offset + 4];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new StructDef(n, Parsing.members(fs)));
				}
			},
			new Action() {	// [59] stmt = UNION ID.n LBRACE fields.fs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_fs = _symbols[offset + 4];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new UnionDef(n, Parsing.members(fs)));
				}
			},
			new Action() {	// [60] stmt = ENUM LBRACE consts.cs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cs = _symbols[offset + 3];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final String[] cs = _list_cs == null ? new String[0] : (String[]) _list_cs.toArray(new String[_list_cs.size()]);
					 return s(new EnumDef(cs));
				}
			},
			new Action() {	// [61] stmt = ENUM ID.n LBRACE consts.cs RBRACE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_cs = _symbols[offset + 4];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final String[] cs = _list_cs == null ? new String[0] : (String[]) _list_cs.toArray(new String[_list_cs.size()]);
					 return s(new EnumDef(n, cs));
				}
			},
			new Action() {	// [62] stmt = type.t ptrs.x fun.n LPAREN RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					 return s(_symbol_n, new FunDecl(Parsing.wrap(t, x), n));
				}
			},
			new Action() {	// [63] stmt = type.t ptrs.x fun.n LPAREN RPAREN block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Block b = (Block) _symbol_b.value;
					 return s(_symbol_n, new FunDef(Parsing.wrap(t, x), n, b));
				}
			},
			new Action() {	// [64] stmt = type.t ptrs.x fun.n LPAREN params.ps RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					 return s(_symbol_n, new FunDecl(Parsing.wrap(t, x), n, Parsing.params(ps)));
				}
			},
			new Action() {	// [65] stmt = type.t ptrs.x fun.n LPAREN params.ps RPAREN block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 2];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final ParamSpec[] ps = _list_ps == null ? new ParamSpec[0] : (ParamSpec[]) _list_ps.toArray(new ParamSpec[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 7];
					final Block b = (Block) _symbol_b.value;
					 return s(_symbol_n, new FunDef(Parsing.wrap(t, x), n, Parsing.formals(ps), b));
				}
			},
			new Action() {	// [66] stmt = type.t vars.vs SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_vs = _symbols[offset + 2];
					final ArrayList _list_vs = (ArrayList) _symbol_vs.value;
					final VarSpec[] vs = _list_vs == null ? new VarSpec[0] : (VarSpec[]) _list_vs.toArray(new VarSpec[_list_vs.size()]);
					 return s(new Group(Parsing.vars(t, vs)));
				}
			},
			new Action() {	// [67] stmt = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Atomic.none());
				}
			},
			new Action() {	// [68] stmt = expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Atomic(a));
				}
			},
			new Action() {	// [69] stmt = GOTO ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return s(new Goto(n));
				}
			},
			new Action() {	// [70] stmt = CASE CONST.n COLON stmt.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Object n = (Object) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s(new Case(n, s));
				}
			},
			new Action() {	// [71] stmt = ID.n COLON stmt.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s(new Label(n, s));
				}
			},
			new Action() {	// [72] stmt = RETURN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Return.none());
				}
			},
			new Action() {	// [73] stmt = RETURN expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Return(a));
				}
			},
			new Action() {	// [74] stmt = BREAK SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Break.self());
				}
			},
			new Action() {	// [75] stmt = CONTINUE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Continue.self());
				}
			},
			new Action() {	// [76] stmt = SWITCH LPAREN expr.e RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(new Switch(e, b));
				}
			},
			new Action() {	// [77] stmt = IF LPAREN expr.a RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(new If(a, b));
				}
			},
			new Action() {	// [78] stmt = IF LPAREN expr.a RPAREN stmt.b ELSE stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Stmt c = (Stmt) _symbol_c.value;
					 return s(new If(a, b, c));
				}
			},
			new Action() {	// [79] stmt = WHILE.w LPAREN expr.a RPAREN stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Stmt b = (Stmt) _symbol_b.value;
					 return s(w, new While(a, b));
				}
			},
			new Action() {	// [80] stmt = DO.w stmt.b WHILE LPAREN expr.a RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Expr a = (Expr) _symbol_a.value;
					 return s(w, new DoWhile(b, a));
				}
			},
			new Action() {	// [81] stmt = FOR.w LPAREN exprs_.a SEMICOLON exprs_.b SEMICOLON exprs_.c RPAREN stmt.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr[] a = (Expr[]) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Expr[] b = (Expr[]) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Expr[] c = (Expr[]) _symbol_c.value;
					final Symbol _symbol_p = _symbols[offset + 9];
					final Stmt p = (Stmt) _symbol_p.value;
					 return s(w, new For(a, b, c, p));
				}
			},
			new Action() {	// [82] stmt = FOR.w LPAREN type.t vars.vs SEMICOLON exprs_.b SEMICOLON exprs_.c RPAREN stmt.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol w = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_vs = _symbols[offset + 4];
					final ArrayList _list_vs = (ArrayList) _symbol_vs.value;
					final VarSpec[] vs = _list_vs == null ? new VarSpec[0] : (VarSpec[]) _list_vs.toArray(new VarSpec[_list_vs.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Expr[] b = (Expr[]) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 8];
					final Expr[] c = (Expr[]) _symbol_c.value;
					final Symbol _symbol_p = _symbols[offset + 10];
					final Stmt p = (Stmt) _symbol_p.value;
					 return s(w, new For(Parsing.vars(t, vs), b, c, p));
				}
			},
			Action.RETURN,	// [83] expr = PREFIX
			Action.RETURN,	// [84] expr = POSTFIX
			RETURN2,	// [85] expr = LPAREN expr.e RPAREN
			new Action() {	// [86] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(new Id(n));
				}
			},
			new Action() {	// [87] expr = CONST.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Object n = (Object) _symbol_n.value;
					 return s(new Lit(n));
				}
			},
			new Action() {	// [88] expr = ID.n LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(new FunCall(n));
				}
			},
			new Action() {	// [89] expr = ID.n LPAREN exprs.as RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_as = _symbols[offset + 3];
					final ArrayList _list_as = (ArrayList) _symbol_as.value;
					final Expr[] as = _list_as == null ? new Expr[0] : (Expr[]) _list_as.toArray(new Expr[_list_as.size()]);
					 return s(new FunCall(n, as));
				}
			},
			new Action() {	// [90] expr = LPAREN type.t ptrs.x RPAREN expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_x = _symbols[offset + 3];
					final int x = (int) _symbol_x.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new Cast(Parsing.wrap(t, x), a));
				}
			},
			new Action() {	// [91] expr = SIZEOF LPAREN type.t RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final Type t = (Type) _symbol_t.value;
					 return s(new SizeOfType(t));
				}
			},
			new Action() {	// [92] expr = SIZEOF LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					 return s(new SizeOfExpr(e));
				}
			},
			new Action() {	// [93] expr = expr.a INCR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PostOp("++", a));
				}
			},
			new Action() {	// [94] expr = expr.a DECR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PostOp("--", a));
				}
			},
			new Action() {	// [95] expr = expr.a ARROW ID.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					 return s(new Arrow(a, f));
				}
			},
			new Action() {	// [96] expr = expr.a DOT ID.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					 return s(new Dot(a, f));
				}
			},
			new Action() {	// [97] expr = expr.a LBRACK expr.i RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expr i = (Expr) _symbol_i.value;
					 return s(new Index(a, i));
				}
			},
			new Action() {	// [98] expr = INCR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("++", a));
				}
			},
			new Action() {	// [99] expr = DECR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("--", a));
				}
			},
			new Action() {	// [100] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("+", a));
				}
			},
			new Action() {	// [101] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("-", a));
				}
			},
			new Action() {	// [102] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("!", a));
				}
			},
			new Action() {	// [103] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("~", a));
				}
			},
			new Action() {	// [104] expr = STAR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("*", a));
				}
			},
			new Action() {	// [105] expr = AMP expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return s(new PreOp("&", a));
				}
			},
			new Action() {	// [106] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("*", a, b));
				}
			},
			new Action() {	// [107] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("/", a, b));
				}
			},
			new Action() {	// [108] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("%", a, b));
				}
			},
			new Action() {	// [109] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("+", a, b));
				}
			},
			new Action() {	// [110] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("-", a, b));
				}
			},
			new Action() {	// [111] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<<",a, b));
				}
			},
			new Action() {	// [112] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">>",a, b));
				}
			},
			new Action() {	// [113] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<", a, b));
				}
			},
			new Action() {	// [114] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("<=",a, b));
				}
			},
			new Action() {	// [115] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">=",a, b));
				}
			},
			new Action() {	// [116] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(">", a, b));
				}
			},
			new Action() {	// [117] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("==",a, b));
				}
			},
			new Action() {	// [118] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("!=",a, b));
				}
			},
			new Action() {	// [119] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("&", a, b));
				}
			},
			new Action() {	// [120] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("^", a, b));
				}
			},
			new Action() {	// [121] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("|", a, b));
				}
			},
			new Action() {	// [122] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("&&",a, b));
				}
			},
			new Action() {	// [123] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("||",a, b));
				}
			},
			new Action() {	// [124] expr = expr.a QUESTION expr.b COLON expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Expr c = (Expr) _symbol_c.value;
					 return s(new Question(a, b, c));
				}
			},
			new Action() {	// [125] expr = expr.a ASG expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("=", a, b));
				}
			},
			new Action() {	// [126] expr = expr.a ASG_OP.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final String e = (String) _symbol_e.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp("=", a, new BinOp(e.substring(0, e.length() - 1), a, b)));
				}
			},
			new Action() {	// [127] expr = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return s(new BinOp(",", a, b));
				}
			},
			new Action() {	// [128] type = VOID
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._void());
				}
			},
			new Action() {	// [129] type = BOOL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._Bool());
				}
			},
			new Action() {	// [130] type = FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._float());
				}
			},
			new Action() {	// [131] type = DOUBLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._double());
				}
			},
			new Action() {	// [132] type = LONG_DOUBLE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Type._double());
				}
			},
			Action.NONE,  	// [133] opt$SIGNED = 
			Action.RETURN,	// [134] opt$SIGNED = SIGNED
			new Action() {	// [135] type = opt$SIGNED CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._char());
				}
			},
			Action.NONE,  	// [136] opt$INT = 
			Action.RETURN,	// [137] opt$INT = INT
			new Action() {	// [138] type = opt$SIGNED SHORT opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._short());
				}
			},
			new Action() {	// [139] type = opt$SIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._int());
				}
			},
			new Action() {	// [140] type = opt$SIGNED LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._long());
				}
			},
			new Action() {	// [141] type = opt$SIGNED LONG_LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Signed._long_long());
				}
			},
			new Action() {	// [142] type = UNSIGNED CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._char());
				}
			},
			new Action() {	// [143] type = UNSIGNED SHORT opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._short());
				}
			},
			new Action() {	// [144] type = UNSIGNED
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._int());
				}
			},
			new Action() {	// [145] type = UNSIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._int());
				}
			},
			new Action() {	// [146] type = UNSIGNED LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long());
				}
			},
			new Action() {	// [147] type = LONG_UNSIGNED INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long());
				}
			},
			new Action() {	// [148] type = UNSIGNED LONG_LONG opt$INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Unsigned._long_long());
				}
			},
			new Action() {	// [149] type = TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					 return s(new TypedefName(t));
				}
			},
			new Action() {	// [150] type = STRUCT ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new StructName(t));
				}
			},
			new Action() {	// [151] type = UNION ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new UnionName(t));
				}
			},
			new Action() {	// [152] type = ENUM ID.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					 return s(new EnumName(t));
				}
			},
			new Action() {	// [153] type = STRUCT LBRACE fields.fs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new AnonStruct(Parsing.members(fs)));
				}
			},
			new Action() {	// [154] type = UNION LBRACE fields.fs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fs = _symbols[offset + 3];
					final ArrayList _list_fs = (ArrayList) _symbol_fs.value;
					final MemberSpecs[] fs = _list_fs == null ? new MemberSpecs[0] : (MemberSpecs[]) _list_fs.toArray(new MemberSpecs[_list_fs.size()]);
					 return s(new AnonUnion(Parsing.members(fs)));
				}
			},
			new Action() {	// [155] type = ENUM LBRACE consts.cs RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cs = _symbols[offset + 3];
					final ArrayList _list_cs = (ArrayList) _symbol_cs.value;
					final String[] cs = _list_cs == null ? new String[0] : (String[]) _list_cs.toArray(new String[_list_cs.size()]);
					 return s(new AnonEnum(cs));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
