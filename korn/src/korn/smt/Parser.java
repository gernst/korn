package korn.smt;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short RP = 1;
		static public final short LP = 2;
		static public final short ID = 3;
		static public final short NUM = 4;
		static public final short INT = 5;
		static public final short REAL = 6;
		static public final short BOOL = 7;
		static public final short DEFINE_FUN = 8;
		static public final short KW = 9;
		static public final short LET = 10;
		static public final short EXISTS = 11;
		static public final short FORALL = 12;
		static public final short MODEL = 13;
		static public final short POINTER = 14;
		static public final short ARRAY = 15;
		static public final short BANG = 16;

		static public final String[] NAMES = {
			"EOF",
			"RP",
			"LP",
			"ID",
			"NUM",
			"INT",
			"REAL",
			"BOOL",
			"DEFINE_FUN",
			"KW",
			"LET",
			"EXISTS",
			"FORALL",
			"MODEL",
			"POINTER",
			"ARRAY",
			"BANG"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nrbFTF544Knx#tTnG5v0gzWmUSYegYM10LLB015Y0c9YR64iM8CI4cA8aQWffeB3yO4ut" +
		"6$ydUUyLUiJw$CpjxMTPZDfzvRTxCtDlR1#0okaHGXbHa8miHM4X1DUhH8R$G1Jzo64cMA$" +
		"8NIOoqOm9Qq8W5M8AbM8PI#MZo2f67AkQCHu5yCBxPjfHxY6AQVCCYJC94J4KnohdJt54xj" +
		"J0pBQu7CCxHvGrgZTwEjKZNEVR#OynoLuPHgywJhpmpW#UbeHKhzGqo4KG8OUGYN#wW22Me" +
		"aFUeH0oJCGKryXhJCGEpC1Drc8yvc8S6#OA5M4nV4vgn72km2glHXlLOWtNev9bWdV9OEJ$" +
		"lNSJJr2z9fpURlY0ZFbOKEXBX$IpMD9VLJ6Oz2ncpyyfOav2sAkE#V2Dzl6MfzbQmVb7Mfk" +
		"g$dIm#gN4zWsSxkigpTPNZrpdslcFDFftZOF6yLBxtJEC9wtk6zAf28qCwOklvAE0keRXNF" +
		"H7j2#jiHTWL1ReFGGzLCsKtaaeI914JQpQoXtIINb97zf4SOf5#jSP1E2XgI2qvOF87o0wZ" +
		"Rt3MSfIGWqPN8kQA7IOTP91i94F6VuJiDFfHieaSTz#1umJPHKwIpUIKyPyckur#XZIGi#v" +
		"S4zj6ciWvOxUIDdBUjUO2wICNoLPooLE7OPS#ujc$Fi6PVYEtmzGgmPeUPvtBjyN8NfSlox" +
		"DchyVEChBFuz$ZIB9$Z3l4Z1pm#9tts4y64#MQ#91BL#$lM88rpl$E#rwxCMh83$afl#4Py" +
		"afkowsuTLFFzyb3UQ3r6th#99zTETVr$DPOB#IHl7D5h#dvkx5UodDv9a#DzSJ8npBYohWg" +
		"Vw2#WshTXmAw7wbkLKnlCVKYagEns1b0VEmJgkSeB7OS41zxZazteLBwelH5gLUGRFQ7YEv" +
		"M0TSNhb1s4hzyrISiTZWViVINhNfSkUaODaaaG5BYnFu1B2VMGm==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

    Symbol s(Object x) { return new Symbol(x); }

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] model = defs.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 1];
					final ArrayList _list_ds = (ArrayList) _symbol_ds.value;
					final Def[] ds = _list_ds == null ? new Def[0] : (Def[]) _list_ds.toArray(new Def[_list_ds.size()]);
					 return s(new Model(ds));
				}
			},
			new Action() {	// [1] model = LP MODEL defs.ds RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 3];
					final ArrayList _list_ds = (ArrayList) _symbol_ds.value;
					final Def[] ds = _list_ds == null ? new Def[0] : (Def[]) _list_ds.toArray(new Def[_list_ds.size()]);
					 return s(new Model(ds));
				}
			},
			new Action() {	// [2] lst$def = def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [3] lst$def = lst$def def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [4] opt$lst$def = 
			Action.RETURN,	// [5] opt$lst$def = lst$def
			Action.RETURN,	// [6] defs = opt$lst$def
			new Action() {	// [7] lst$param = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [8] lst$param = lst$param param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [9] opt$lst$param = 
			Action.RETURN,	// [10] opt$lst$param = lst$param
			Action.RETURN,	// [11] params = opt$lst$param
			new Action() {	// [12] lst$expr = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [13] lst$expr = lst$expr expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [14] opt$lst$expr = 
			Action.RETURN,	// [15] opt$lst$expr = lst$expr
			Action.RETURN,	// [16] exprs = opt$lst$expr
			new Action() {	// [17] lst$pair = pair
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [18] lst$pair = lst$pair pair
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [19] opt$lst$pair = 
			Action.RETURN,	// [20] opt$lst$pair = lst$pair
			Action.RETURN,	// [21] pairs = opt$lst$pair
			new Action() {	// [22] def = LP DEFINE_FUN ID.n LP params.ps RP sort.s expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_s = _symbols[offset + 7];
					final Sort s = (Sort) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 8];
					final Pure b = (Pure) _symbol_b.value;
					 return s(new Def(n, ps, s, b));
				}
			},
			new Action() {	// [23] param = LP var.n sort.s RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Var n = (Var) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Sort s = (Sort) _symbol_s.value;
					 return s(new Param(n, s));
				}
			},
			new Action() {	// [24] pair = LP var.n expr.e RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Var n = (Var) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Pure e = (Pure) _symbol_e.value;
					 return s(Parsing.pair(n,e));
				}
			},
			new Action() {	// [25] sort = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.intSort());
				}
			},
			new Action() {	// [26] sort = REAL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.realSort());
				}
			},
			new Action() {	// [27] sort = BOOL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.boolSort());
				}
			},
			new Action() {	// [28] sort = LP POINTER sort.e RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Sort e = (Sort) _symbol_e.value;
					 return s(Parsing.pointerSort(e));
				}
			},
			new Action() {	// [29] sort = LP ARRAY sort.d sort.r RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 3];
					final Sort d = (Sort) _symbol_d.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Sort r = (Sort) _symbol_r.value;
					 return s(Parsing.arraySort(d,r));
				}
			},
			new Action() {	// [30] var = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Var.apply(n));
				}
			},
			RETURN2,	// [31] attr = KW.k expr.e; returns 'e' although more are marked
			new Action() {	// [32] lst$attr = attr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [33] lst$attr = lst$attr attr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [34] opt$lst$attr = 
			Action.RETURN,	// [35] opt$lst$attr = lst$attr
			Action.RETURN,	// [36] attrs = opt$lst$attr
			new Action() {	// [37] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Parsing.num(n));
				}
			},
			new Action() {	// [38] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Parsing.apply(n));
				}
			},
			RETURN3,	// [39] expr = LP BANG expr.e attrs RP
			new Action() {	// [40] expr = LP ID.n exprs.es RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_es = _symbols[offset + 3];
					final ArrayList _list_es = (ArrayList) _symbol_es.value;
					final Pure[] es = _list_es == null ? new Pure[0] : (Pure[]) _list_es.toArray(new Pure[_list_es.size()]);
					 return s(Parsing.apply(n, es));
				}
			},
			new Action() {	// [41] expr = LP LET LP pairs.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final scala.Tuple2[] ps = _list_ps == null ? new scala.Tuple2[0] : (scala.Tuple2[]) _list_ps.toArray(new scala.Tuple2[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.let(ps, b));
				}
			},
			new Action() {	// [42] expr = LP EXISTS LP params.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.bind("exists", ps, b));
				}
			},
			new Action() {	// [43] expr = LP FORALL LP params.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.bind("forall", ps, b));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
