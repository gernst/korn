package korn.smt;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short RP = 1;
		static public final short LP = 2;
		static public final short ID = 3;
		static public final short NUM = 4;
		static public final short INT = 5;
		static public final short BOOL = 6;
		static public final short DEFINE_FUN = 7;
		static public final short LET = 8;
		static public final short EXISTS = 9;
		static public final short FORALL = 10;
		static public final short MODEL = 11;
		static public final short ARRAY = 12;

		static public final String[] NAMES = {
			"EOF",
			"RP",
			"LP",
			"ID",
			"NUM",
			"INT",
			"BOOL",
			"DEFINE_FUN",
			"LET",
			"EXISTS",
			"FORALL",
			"MODEL",
			"ARRAY"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nrbDbFKq4KnhzxsrehNInG2hPbLL1ngGkALh4kMA8FnXX2H1CLGvIueJxue77vFztt7N7" +
		"VyFZDzBGCDpetlpdxX9dq0y0TL4HGmM8i8ZwYY20glx04PIJbBZPX8rfa5Xaqema5hC5kvE" +
		"M3nlrLAt#m71rOXXvEjY64BAVNyGmpNSPUbAot3TjrpjrBY15JCvJaAmQSpWPvYruq82nlq" +
		"6jgyeMOdXJYI60fqcX4gymWXtPqeWlTyXehq8VLM8bLA68jrcE3VCPcR65kAmQn4qFOWLqO" +
		"nXximtwU0D8CZsJHQl7u5YcUti7JctWZ4uSGvXl5UAz4FSwe1M#VuzqBzFBCjTjftqxFUn6" +
		"#ShL$uPucfbQjUnfLgr4RH$a6djRc2N5Fsh$6V0cRgqOPjB2Qg6VDbxAv9BqalxXJ0qPkmw" +
		"u#OcCI8o7IhRL#jGV9E3bEAkGOAH9pzvEcfmPNqhujS4hZ2TBcr4#JGsII390pcZzBZgW$H" +
		"GR9XS3P5yaecIObSbdpLyYO#bV94BaMcBr4ocION7VoDyXHSfCS8BVSEH6PSVpPm9b5DzQU" +
		"EQqThjqd25Sy48y5ufZQyK1#j6OHU7Ud9wzs8f2VL7k2JFrdzXmv$uzybzhfG7u42vRya9$" +
		"o6u4bh#InF5B$eTq$oYUd$i3kxpHw8K$alLEzR$Tl6hsKv$AiNdigtvtEUp97qqC5UoIi#l" +
		"QfRLXzPqcZnQSoGJpgrAE63JvLR9JiKSaUjMtmxI#yG3z7qjH7olu72Akc315gp5FT6S8aM" +
		"gVpBmZlgDq=");

    Symbol s(Object x) { return new Symbol(x); }

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] model = defs.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 1];
					final ArrayList _list_ds = (ArrayList) _symbol_ds.value;
					final Def[] ds = _list_ds == null ? new Def[0] : (Def[]) _list_ds.toArray(new Def[_list_ds.size()]);
					 return s(new Model(ds));
				}
			},
			new Action() {	// [1] model = LP MODEL defs.ds RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 3];
					final ArrayList _list_ds = (ArrayList) _symbol_ds.value;
					final Def[] ds = _list_ds == null ? new Def[0] : (Def[]) _list_ds.toArray(new Def[_list_ds.size()]);
					 return s(new Model(ds));
				}
			},
			new Action() {	// [2] lst$def = def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [3] lst$def = lst$def def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [4] opt$lst$def = 
			Action.RETURN,	// [5] opt$lst$def = lst$def
			Action.RETURN,	// [6] defs = opt$lst$def
			new Action() {	// [7] lst$param = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [8] lst$param = lst$param param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [9] opt$lst$param = 
			Action.RETURN,	// [10] opt$lst$param = lst$param
			Action.RETURN,	// [11] params = opt$lst$param
			new Action() {	// [12] lst$expr = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [13] lst$expr = lst$expr expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [14] opt$lst$expr = 
			Action.RETURN,	// [15] opt$lst$expr = lst$expr
			Action.RETURN,	// [16] exprs = opt$lst$expr
			new Action() {	// [17] lst$pair = pair
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [18] lst$pair = lst$pair pair
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [19] opt$lst$pair = 
			Action.RETURN,	// [20] opt$lst$pair = lst$pair
			Action.RETURN,	// [21] pairs = opt$lst$pair
			new Action() {	// [22] def = LP DEFINE_FUN ID.n LP params.ps RP sort.s expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_s = _symbols[offset + 7];
					final Sort s = (Sort) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 8];
					final Pure b = (Pure) _symbol_b.value;
					 return s(new Def(n, ps, s, b));
				}
			},
			new Action() {	// [23] param = LP var.n sort.s RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Var n = (Var) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Sort s = (Sort) _symbol_s.value;
					 return s(new Param(n, s));
				}
			},
			new Action() {	// [24] pair = LP var.n expr.e RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Var n = (Var) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Pure e = (Pure) _symbol_e.value;
					 return s(Parsing.pair(n,e));
				}
			},
			new Action() {	// [25] sort = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.intSort());
				}
			},
			new Action() {	// [26] sort = BOOL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.boolSort());
				}
			},
			new Action() {	// [27] sort = LP ARRAY sort.d sort.r RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 3];
					final Sort d = (Sort) _symbol_d.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Sort r = (Sort) _symbol_r.value;
					 return s(Parsing.arraySort(d,r));
				}
			},
			new Action() {	// [28] var = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Var.apply(n));
				}
			},
			new Action() {	// [29] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Parsing.num(n));
				}
			},
			new Action() {	// [30] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Parsing.apply(n));
				}
			},
			new Action() {	// [31] expr = LP ID.n exprs.es RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_es = _symbols[offset + 3];
					final ArrayList _list_es = (ArrayList) _symbol_es.value;
					final Pure[] es = _list_es == null ? new Pure[0] : (Pure[]) _list_es.toArray(new Pure[_list_es.size()]);
					 return s(Parsing.apply(n, es));
				}
			},
			new Action() {	// [32] expr = LP LET LP pairs.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final scala.Tuple2[] ps = _list_ps == null ? new scala.Tuple2[0] : (scala.Tuple2[]) _list_ps.toArray(new scala.Tuple2[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.let(ps, b));
				}
			},
			new Action() {	// [33] expr = LP EXISTS LP params.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.bind("exists", ps, b));
				}
			},
			new Action() {	// [34] expr = LP FORALL LP params.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.bind("forall", ps, b));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
