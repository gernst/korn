package korn.smt;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short RP = 1;
		static public final short LP = 2;
		static public final short ID = 3;
		static public final short NUM = 4;
		static public final short INT = 5;
		static public final short REAL = 6;
		static public final short BOOL = 7;
		static public final short DEFINE_FUN = 8;
		static public final short DEFINE = 9;
		static public final short KW = 10;
		static public final short LET = 11;
		static public final short EXISTS = 12;
		static public final short FORALL = 13;
		static public final short MODEL = 14;
		static public final short POINTER = 15;
		static public final short ARRAY = 16;
		static public final short BANG = 17;

		static public final String[] NAMES = {
			"EOF",
			"RP",
			"LP",
			"ID",
			"NUM",
			"INT",
			"REAL",
			"BOOL",
			"DEFINE_FUN",
			"DEFINE",
			"KW",
			"LET",
			"EXISTS",
			"FORALL",
			"MODEL",
			"POINTER",
			"ARRAY",
			"BANG"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oDbEblZ54KnfztfggZj4pfhbDQLTI#gwssrbAjdQALI2H28Y6n2uae4gdOQO9OFeY4s2B" +
		"#3Vk#x$k#ByTpxvnfNs$xmII$UyuzzpbdxZ9p09n3kVn0OpI23m4Hj4OJJ95tI48YMY0QxT" +
		"07u#Gyoj40oLH58S2CFyYbtv1#APgY28Cm4CCn0eLeXHp4e2LIMRKD$4X7bhpLQhtb9lNzq" +
		"CNgEp2lCqAQLsHteRxPGqtyCmhKByK4#MrpIr56jV72bVzxb1lo4jta1M5T#SJQ8SHY9CRO" +
		"kVckPeX3F898G7Ea84sk8mEPo9OtQ8lso4D7T9Bdw8hkw8KUw8d#w8jy392F68mXZ0t5C8p" +
		"2Q1HZB4em2UCn4PCn0rCn7TCmaxjmUDSfI4KQm1kAuIsQY9zt6yUzDERfSwsgcQeIgGkgtv" +
		"mdyV4ioNoFQBv01lVlyDPRKvFDbHpkCb8jdPxHPrfz5gDj#6hXF9zLHNopXxfnamkRM$kju" +
		"Sh$Fpgsdfj6F4yyVpMrCJ$719xGiJWyKzW6xMhOJ#TlogyQdusOivbO0hqm2QxLe5PsU8AA" +
		"DR2VF18TTga5xnDyBV2sWIcgALCxX5II3QI4h2SXCfDiCfe8$4IHMQGdgTBOPh9O$TakRO1" +
		"iLNyRwU9QsqwMa9ra3jcjyJracVhLP2xPvzd3VhA2723poK6D7oAhr3zCyiaHTwwkBI85vA" +
		"ZE2qanEURI72ThoGcoW9pK#2bocgmZPyX2SjPTNqHUgFtjgkVtx65UFVkALRkKBFUkwzfA4" +
		"l2UH#qQLyohMUkPfwYjzCHNHomyR#$IPAcjyiItgDr8TjINg#kxNBvvx#fwD0LgzzQpDaBj" +
		"0K#y0dK#yas#oyywqMToJQxMpAxOyHQv8xUjVzcEx#M3A#UI7L$fxB7SbTUkrOjs$AAp9$9" +
		"87ie3dTrNUq##kZ8k$BEZf$ABfXF$dmxnaoXsGOVuREzCevzAaYm#TYSGXxtAiLqnn5WsJ5" +
		"zqR5VCj9Wk2EAm8phiHG4ImrvY#cMKgviOpBm1kupfIJvsMTDfJOy5STXpdPgk5QGkI7sGV" +
		"JD2kx$#$kxx");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

    Symbol s(Object x) { return new Symbol(x); }

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] model = defs.ds
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 1];
					final ArrayList _list_ds = (ArrayList) _symbol_ds.value;
					final Def[] ds = _list_ds == null ? new Def[0] : (Def[]) _list_ds.toArray(new Def[_list_ds.size()]);
					 return s(new Model(ds));
				}
			},
			new Action() {	// [1] model = LP defs.ds RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 2];
					final ArrayList _list_ds = (ArrayList) _symbol_ds.value;
					final Def[] ds = _list_ds == null ? new Def[0] : (Def[]) _list_ds.toArray(new Def[_list_ds.size()]);
					 return s(new Model(ds));
				}
			},
			new Action() {	// [2] model = LP MODEL defs.ds RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ds = _symbols[offset + 3];
					final ArrayList _list_ds = (ArrayList) _symbol_ds.value;
					final Def[] ds = _list_ds == null ? new Def[0] : (Def[]) _list_ds.toArray(new Def[_list_ds.size()]);
					 return s(new Model(ds));
				}
			},
			new Action() {	// [3] lst$def = def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [4] lst$def = lst$def def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [5] opt$lst$def = 
			Action.RETURN,	// [6] opt$lst$def = lst$def
			Action.RETURN,	// [7] defs = opt$lst$def
			new Action() {	// [8] lst$param = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [9] lst$param = lst$param param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [10] opt$lst$param = 
			Action.RETURN,	// [11] opt$lst$param = lst$param
			Action.RETURN,	// [12] params = opt$lst$param
			new Action() {	// [13] lst$expr = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [14] lst$expr = lst$expr expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [15] opt$lst$expr = 
			Action.RETURN,	// [16] opt$lst$expr = lst$expr
			Action.RETURN,	// [17] exprs = opt$lst$expr
			new Action() {	// [18] lst$pair = pair
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [19] lst$pair = lst$pair pair
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [20] opt$lst$pair = 
			Action.RETURN,	// [21] opt$lst$pair = lst$pair
			Action.RETURN,	// [22] pairs = opt$lst$pair
			new Action() {	// [23] def = LP DEFINE_FUN ID.n LP params.ps RP sort.s expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_s = _symbols[offset + 7];
					final Sort s = (Sort) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 8];
					final Pure b = (Pure) _symbol_b.value;
					 return s(new Def(n, ps, s, b));
				}
			},
			new Action() {	// [24] def = LP DEFINE LP ID.n params.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 4];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_ps = _symbols[offset + 5];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 7];
					final Pure b = (Pure) _symbol_b.value;
					 return s(new Def(n, ps, b));
				}
			},
			new Action() {	// [25] param = LP var.n sort.s RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Var n = (Var) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Sort s = (Sort) _symbol_s.value;
					 return s(new Param(n, s));
				}
			},
			new Action() {	// [26] pair = LP var.n expr.e RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Var n = (Var) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Pure e = (Pure) _symbol_e.value;
					 return s(Parsing.pair(n,e));
				}
			},
			new Action() {	// [27] sort = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.intSort());
				}
			},
			new Action() {	// [28] sort = REAL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.realSort());
				}
			},
			new Action() {	// [29] sort = BOOL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return s(Parsing.boolSort());
				}
			},
			new Action() {	// [30] sort = LP POINTER sort.e RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 3];
					final Sort e = (Sort) _symbol_e.value;
					 return s(Parsing.pointerSort(e));
				}
			},
			new Action() {	// [31] sort = LP ARRAY sort.d sort.r RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 3];
					final Sort d = (Sort) _symbol_d.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Sort r = (Sort) _symbol_r.value;
					 return s(Parsing.arraySort(d,r));
				}
			},
			new Action() {	// [32] var = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Var.apply(n));
				}
			},
			RETURN2,	// [33] attr = KW.k expr.e; returns 'e' although more are marked
			new Action() {	// [34] lst$attr = attr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [35] lst$attr = lst$attr attr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [36] opt$lst$attr = 
			Action.RETURN,	// [37] opt$lst$attr = lst$attr
			Action.RETURN,	// [38] attrs = opt$lst$attr
			new Action() {	// [39] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Parsing.num(n));
				}
			},
			new Action() {	// [40] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return s(Parsing.apply(n));
				}
			},
			RETURN3,	// [41] expr = LP BANG expr.e attrs RP
			new Action() {	// [42] expr = LP ID.n exprs.es RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_es = _symbols[offset + 3];
					final ArrayList _list_es = (ArrayList) _symbol_es.value;
					final Pure[] es = _list_es == null ? new Pure[0] : (Pure[]) _list_es.toArray(new Pure[_list_es.size()]);
					 return s(Parsing.apply(n, es));
				}
			},
			new Action() {	// [43] expr = LP LET LP pairs.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final scala.Tuple2[] ps = _list_ps == null ? new scala.Tuple2[0] : (scala.Tuple2[]) _list_ps.toArray(new scala.Tuple2[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.let(ps, b));
				}
			},
			new Action() {	// [44] expr = LP EXISTS LP params.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.bind("exists", ps, b));
				}
			},
			new Action() {	// [45] expr = LP FORALL LP params.ps RP expr.b RP
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ps = _symbols[offset + 4];
					final ArrayList _list_ps = (ArrayList) _symbol_ps.value;
					final Param[] ps = _list_ps == null ? new Param[0] : (Param[]) _list_ps.toArray(new Param[_list_ps.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Pure b = (Pure) _symbol_b.value;
					 return s(Parsing.bind("forall", ps, b));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
